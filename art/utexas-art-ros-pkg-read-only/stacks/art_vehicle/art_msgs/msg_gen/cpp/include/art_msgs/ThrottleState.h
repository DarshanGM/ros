/* Auto-generated by genmsg_cpp for file /home/james/ros/art/utexas-art-ros-pkg-read-only/stacks/art_vehicle/art_msgs/msg/ThrottleState.msg */
#ifndef ART_MSGS_MESSAGE_THROTTLESTATE_H
#define ART_MSGS_MESSAGE_THROTTLESTATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace art_msgs
{
template <class ContainerAllocator>
struct ThrottleState_ {
  typedef ThrottleState_<ContainerAllocator> Type;

  ThrottleState_()
  : header()
  , position(0.0)
  , rpms(0.0)
  , estop(0)
  , pwm(0.0)
  , dstate(0.0)
  , istate(0.0)
  {
  }

  ThrottleState_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , position(0.0)
  , rpms(0.0)
  , estop(0)
  , pwm(0.0)
  , dstate(0.0)
  , istate(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef float _position_type;
  float position;

  typedef float _rpms_type;
  float rpms;

  typedef uint8_t _estop_type;
  uint8_t estop;

  typedef float _pwm_type;
  float pwm;

  typedef float _dstate_type;
  float dstate;

  typedef float _istate_type;
  float istate;


private:
  static const char* __s_getDataType_() { return "art_msgs/ThrottleState"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "5b1c64434e6ebe49625631607b188cd5"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# ART throttle controller state message\n\
\n\
# $Id$\n\
\n\
Header  header\n\
\n\
float32 position                # fractional position [0, 1]\n\
float32 rpms                    # engine speed (rev/min)\n\
uint8   estop                   # emergency stop indicator\n\
\n\
# optional extra diagnostic information:\n\
float32 pwm                     # Pulse Width Modulation value\n\
float32 dstate                  # PID derivative state\n\
float32 istate                  # PID integral state\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, header);
    ros::serialization::serialize(stream, position);
    ros::serialization::serialize(stream, rpms);
    ros::serialization::serialize(stream, estop);
    ros::serialization::serialize(stream, pwm);
    ros::serialization::serialize(stream, dstate);
    ros::serialization::serialize(stream, istate);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, header);
    ros::serialization::deserialize(stream, position);
    ros::serialization::deserialize(stream, rpms);
    ros::serialization::deserialize(stream, estop);
    ros::serialization::deserialize(stream, pwm);
    ros::serialization::deserialize(stream, dstate);
    ros::serialization::deserialize(stream, istate);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(header);
    size += ros::serialization::serializationLength(position);
    size += ros::serialization::serializationLength(rpms);
    size += ros::serialization::serializationLength(estop);
    size += ros::serialization::serializationLength(pwm);
    size += ros::serialization::serializationLength(dstate);
    size += ros::serialization::serializationLength(istate);
    return size;
  }

  typedef boost::shared_ptr< ::art_msgs::ThrottleState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::art_msgs::ThrottleState_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ThrottleState
typedef  ::art_msgs::ThrottleState_<std::allocator<void> > ThrottleState;

typedef boost::shared_ptr< ::art_msgs::ThrottleState> ThrottleStatePtr;
typedef boost::shared_ptr< ::art_msgs::ThrottleState const> ThrottleStateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::art_msgs::ThrottleState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::art_msgs::ThrottleState_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace art_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::art_msgs::ThrottleState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::art_msgs::ThrottleState_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::art_msgs::ThrottleState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5b1c64434e6ebe49625631607b188cd5";
  }

  static const char* value(const  ::art_msgs::ThrottleState_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5b1c64434e6ebe49ULL;
  static const uint64_t static_value2 = 0x625631607b188cd5ULL;
};

template<class ContainerAllocator>
struct DataType< ::art_msgs::ThrottleState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "art_msgs/ThrottleState";
  }

  static const char* value(const  ::art_msgs::ThrottleState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::art_msgs::ThrottleState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ART throttle controller state message\n\
\n\
# $Id$\n\
\n\
Header  header\n\
\n\
float32 position                # fractional position [0, 1]\n\
float32 rpms                    # engine speed (rev/min)\n\
uint8   estop                   # emergency stop indicator\n\
\n\
# optional extra diagnostic information:\n\
float32 pwm                     # Pulse Width Modulation value\n\
float32 dstate                  # PID derivative state\n\
float32 istate                  # PID integral state\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::art_msgs::ThrottleState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::art_msgs::ThrottleState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::art_msgs::ThrottleState_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::art_msgs::ThrottleState_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.position);
    stream.next(m.rpms);
    stream.next(m.estop);
    stream.next(m.pwm);
    stream.next(m.dstate);
    stream.next(m.istate);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ThrottleState_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::art_msgs::ThrottleState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::art_msgs::ThrottleState_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "position: ";
    Printer<float>::stream(s, indent + "  ", v.position);
    s << indent << "rpms: ";
    Printer<float>::stream(s, indent + "  ", v.rpms);
    s << indent << "estop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.estop);
    s << indent << "pwm: ";
    Printer<float>::stream(s, indent + "  ", v.pwm);
    s << indent << "dstate: ";
    Printer<float>::stream(s, indent + "  ", v.dstate);
    s << indent << "istate: ";
    Printer<float>::stream(s, indent + "  ", v.istate);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ART_MSGS_MESSAGE_THROTTLESTATE_H

