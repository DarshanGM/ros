/* Auto-generated by genmsg_cpp for file /home/james/ros/art/utexas-art-ros-pkg-read-only/stacks/art_vehicle/art_msgs/msg/Observation.msg */
#ifndef ART_MSGS_MESSAGE_OBSERVATION_H
#define ART_MSGS_MESSAGE_OBSERVATION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace art_msgs
{
template <class ContainerAllocator>
struct Observation_ {
  typedef Observation_<ContainerAllocator> Type;

  Observation_()
  : oid(0)
  , name()
  , applicable(false)
  , clear(false)
  , time(0.0)
  , distance(0.0)
  , velocity(0.0)
  , nobjects(0)
  {
  }

  Observation_(const ContainerAllocator& _alloc)
  : oid(0)
  , name(_alloc)
  , applicable(false)
  , clear(false)
  , time(0.0)
  , distance(0.0)
  , velocity(0.0)
  , nobjects(0)
  {
  }

  typedef int32_t _oid_type;
  int32_t oid;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;

  typedef uint8_t _applicable_type;
  uint8_t applicable;

  typedef uint8_t _clear_type;
  uint8_t clear;

  typedef float _time_type;
  float time;

  typedef float _distance_type;
  float distance;

  typedef float _velocity_type;
  float velocity;

  typedef int32_t _nobjects_type;
  int32_t nobjects;

  enum { Nearest_forward = 0 };
  enum { Nearest_backward = 1 };
  enum { Adjacent_left = 2 };
  enum { Adjacent_right = 3 };
  enum { All_left = 4 };
  enum { All_right = 5 };
  enum { Merge_into_nearest = 6 };
  enum { Merge_across_all = 7 };
  enum { Intersection = 8 };
  enum { N_Observers = 9 };

private:
  static const char* __s_getDataType_() { return "art_msgs/Observation"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "6c2160774352970d1e5208366926f25e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# result returned from a single observer\n\
# $Id$\n\
\n\
# possible observer ID values\n\
int32 Nearest_forward    = 0		# current or closest lane\n\
int32 Nearest_backward   = 1                  \n\
int32 Adjacent_left	 = 2		# adjacent left or right lane\n\
int32 Adjacent_right	 = 3\n\
int32 All_left		 = 4		# all left or right lanes\n\
int32 All_right 	 = 5\n\
int32 Merge_into_nearest = 6            # merge into nearest lane on diff seg\n\
int32 Merge_across_all   = 7            # merge across all lanes on diff seg\n\
int32 Intersection	 = 8		# stop sign intersection precedence\n\
int32 N_Observers        = 9\n\
\n\
int32  oid                      # observer ID\n\
string name                     # observer name\n\
\n\
bool applicable                 # true if obseravation is applicable\n\
bool clear                      # true if clear to go\n\
\n\
# optional time and distance to nearest obstacle\n\
# (only reported by some observers)\n\
float32 time\n\
float32 distance\n\
float32 velocity\n\
int32 nobjects  		# number of objects\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, oid);
    ros::serialization::serialize(stream, name);
    ros::serialization::serialize(stream, applicable);
    ros::serialization::serialize(stream, clear);
    ros::serialization::serialize(stream, time);
    ros::serialization::serialize(stream, distance);
    ros::serialization::serialize(stream, velocity);
    ros::serialization::serialize(stream, nobjects);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, oid);
    ros::serialization::deserialize(stream, name);
    ros::serialization::deserialize(stream, applicable);
    ros::serialization::deserialize(stream, clear);
    ros::serialization::deserialize(stream, time);
    ros::serialization::deserialize(stream, distance);
    ros::serialization::deserialize(stream, velocity);
    ros::serialization::deserialize(stream, nobjects);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(oid);
    size += ros::serialization::serializationLength(name);
    size += ros::serialization::serializationLength(applicable);
    size += ros::serialization::serializationLength(clear);
    size += ros::serialization::serializationLength(time);
    size += ros::serialization::serializationLength(distance);
    size += ros::serialization::serializationLength(velocity);
    size += ros::serialization::serializationLength(nobjects);
    return size;
  }

  typedef boost::shared_ptr< ::art_msgs::Observation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::art_msgs::Observation_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Observation
typedef  ::art_msgs::Observation_<std::allocator<void> > Observation;

typedef boost::shared_ptr< ::art_msgs::Observation> ObservationPtr;
typedef boost::shared_ptr< ::art_msgs::Observation const> ObservationConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::art_msgs::Observation_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::art_msgs::Observation_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace art_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::art_msgs::Observation_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::art_msgs::Observation_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::art_msgs::Observation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6c2160774352970d1e5208366926f25e";
  }

  static const char* value(const  ::art_msgs::Observation_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6c2160774352970dULL;
  static const uint64_t static_value2 = 0x1e5208366926f25eULL;
};

template<class ContainerAllocator>
struct DataType< ::art_msgs::Observation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "art_msgs/Observation";
  }

  static const char* value(const  ::art_msgs::Observation_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::art_msgs::Observation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# result returned from a single observer\n\
# $Id$\n\
\n\
# possible observer ID values\n\
int32 Nearest_forward    = 0		# current or closest lane\n\
int32 Nearest_backward   = 1                  \n\
int32 Adjacent_left	 = 2		# adjacent left or right lane\n\
int32 Adjacent_right	 = 3\n\
int32 All_left		 = 4		# all left or right lanes\n\
int32 All_right 	 = 5\n\
int32 Merge_into_nearest = 6            # merge into nearest lane on diff seg\n\
int32 Merge_across_all   = 7            # merge across all lanes on diff seg\n\
int32 Intersection	 = 8		# stop sign intersection precedence\n\
int32 N_Observers        = 9\n\
\n\
int32  oid                      # observer ID\n\
string name                     # observer name\n\
\n\
bool applicable                 # true if obseravation is applicable\n\
bool clear                      # true if clear to go\n\
\n\
# optional time and distance to nearest obstacle\n\
# (only reported by some observers)\n\
float32 time\n\
float32 distance\n\
float32 velocity\n\
int32 nobjects  		# number of objects\n\
\n\
";
  }

  static const char* value(const  ::art_msgs::Observation_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::art_msgs::Observation_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.oid);
    stream.next(m.name);
    stream.next(m.applicable);
    stream.next(m.clear);
    stream.next(m.time);
    stream.next(m.distance);
    stream.next(m.velocity);
    stream.next(m.nobjects);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Observation_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::art_msgs::Observation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::art_msgs::Observation_<ContainerAllocator> & v) 
  {
    s << indent << "oid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.oid);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "applicable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.applicable);
    s << indent << "clear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.clear);
    s << indent << "time: ";
    Printer<float>::stream(s, indent + "  ", v.time);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
    s << indent << "nobjects: ";
    Printer<int32_t>::stream(s, indent + "  ", v.nobjects);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ART_MSGS_MESSAGE_OBSERVATION_H

