/* Auto-generated by genmsg_cpp for file /home/james/ros/art/utexas-art-ros-pkg-read-only/stacks/art_vehicle/art_msgs/msg/MapID.msg */
#ifndef ART_MSGS_MESSAGE_MAPID_H
#define ART_MSGS_MESSAGE_MAPID_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace art_msgs
{
template <class ContainerAllocator>
struct MapID_ {
  typedef MapID_<ContainerAllocator> Type;

  MapID_()
  : seg(0)
  , lane(0)
  , pt(0)
  {
  }

  MapID_(const ContainerAllocator& _alloc)
  : seg(0)
  , lane(0)
  , pt(0)
  {
  }

  typedef uint16_t _seg_type;
  uint16_t seg;

  typedef uint16_t _lane_type;
  uint16_t lane;

  typedef uint16_t _pt_type;
  uint16_t pt;

  enum { NULL_ID = 65535 };

private:
  static const char* __s_getDataType_() { return "art_msgs/MapID"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "19289d0a831d333d542743932b12dadc"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# Road map identifier for segments, lanes and way-points.\n\
# $Id$\n\
\n\
uint16 NULL_ID = 65535\n\
\n\
uint16 seg      # segment ID\n\
uint16 lane     # lane ID\n\
uint16 pt       # way-point ID\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, seg);
    ros::serialization::serialize(stream, lane);
    ros::serialization::serialize(stream, pt);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, seg);
    ros::serialization::deserialize(stream, lane);
    ros::serialization::deserialize(stream, pt);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(seg);
    size += ros::serialization::serializationLength(lane);
    size += ros::serialization::serializationLength(pt);
    return size;
  }

  typedef boost::shared_ptr< ::art_msgs::MapID_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::art_msgs::MapID_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MapID
typedef  ::art_msgs::MapID_<std::allocator<void> > MapID;

typedef boost::shared_ptr< ::art_msgs::MapID> MapIDPtr;
typedef boost::shared_ptr< ::art_msgs::MapID const> MapIDConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::art_msgs::MapID_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::art_msgs::MapID_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace art_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::art_msgs::MapID_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::art_msgs::MapID_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::art_msgs::MapID_<ContainerAllocator> > {
  static const char* value() 
  {
    return "19289d0a831d333d542743932b12dadc";
  }

  static const char* value(const  ::art_msgs::MapID_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x19289d0a831d333dULL;
  static const uint64_t static_value2 = 0x542743932b12dadcULL;
};

template<class ContainerAllocator>
struct DataType< ::art_msgs::MapID_<ContainerAllocator> > {
  static const char* value() 
  {
    return "art_msgs/MapID";
  }

  static const char* value(const  ::art_msgs::MapID_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::art_msgs::MapID_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Road map identifier for segments, lanes and way-points.\n\
# $Id$\n\
\n\
uint16 NULL_ID = 65535\n\
\n\
uint16 seg      # segment ID\n\
uint16 lane     # lane ID\n\
uint16 pt       # way-point ID\n\
\n\
";
  }

  static const char* value(const  ::art_msgs::MapID_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::art_msgs::MapID_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::art_msgs::MapID_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.seg);
    stream.next(m.lane);
    stream.next(m.pt);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MapID_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::art_msgs::MapID_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::art_msgs::MapID_<ContainerAllocator> & v) 
  {
    s << indent << "seg: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.seg);
    s << indent << "lane: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.lane);
    s << indent << "pt: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pt);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ART_MSGS_MESSAGE_MAPID_H

