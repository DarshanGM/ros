/* Auto-generated by genmsg_cpp for file /home/james/ros/art/utexas-art-ros-pkg-read-only/stacks/art_vehicle/art_msgs/msg/ObservationArray.msg */
#ifndef ART_MSGS_MESSAGE_OBSERVATIONARRAY_H
#define ART_MSGS_MESSAGE_OBSERVATIONARRAY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "art_msgs/Observation.h"

namespace art_msgs
{
template <class ContainerAllocator>
struct ObservationArray_ {
  typedef ObservationArray_<ContainerAllocator> Type;

  ObservationArray_()
  : header()
  , obs()
  {
  }

  ObservationArray_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , obs(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::vector< ::art_msgs::Observation_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::art_msgs::Observation_<ContainerAllocator> >::other >  _obs_type;
  std::vector< ::art_msgs::Observation_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::art_msgs::Observation_<ContainerAllocator> >::other >  obs;


  ROS_DEPRECATED uint32_t get_obs_size() const { return (uint32_t)obs.size(); }
  ROS_DEPRECATED void set_obs_size(uint32_t size) { obs.resize((size_t)size); }
  ROS_DEPRECATED void get_obs_vec(std::vector< ::art_msgs::Observation_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::art_msgs::Observation_<ContainerAllocator> >::other > & vec) const { vec = this->obs; }
  ROS_DEPRECATED void set_obs_vec(const std::vector< ::art_msgs::Observation_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::art_msgs::Observation_<ContainerAllocator> >::other > & vec) { this->obs = vec; }
private:
  static const char* __s_getDataType_() { return "art_msgs/ObservationArray"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "b5eeab09687abc64c329078cb1e9065a"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# Observations from a set of observers\n\
# $Id$\n\
\n\
Header header\n\
Observation[] obs                       # vector of observations\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: art_msgs/Observation\n\
# result returned from a single observer\n\
# $Id$\n\
\n\
# possible observer ID values\n\
int32 Nearest_forward    = 0		# current or closest lane\n\
int32 Nearest_backward   = 1                  \n\
int32 Adjacent_left	 = 2		# adjacent left or right lane\n\
int32 Adjacent_right	 = 3\n\
int32 All_left		 = 4		# all left or right lanes\n\
int32 All_right 	 = 5\n\
int32 Merge_into_nearest = 6            # merge into nearest lane on diff seg\n\
int32 Merge_across_all   = 7            # merge across all lanes on diff seg\n\
int32 Intersection	 = 8		# stop sign intersection precedence\n\
int32 N_Observers        = 9\n\
\n\
int32  oid                      # observer ID\n\
string name                     # observer name\n\
\n\
bool applicable                 # true if obseravation is applicable\n\
bool clear                      # true if clear to go\n\
\n\
# optional time and distance to nearest obstacle\n\
# (only reported by some observers)\n\
float32 time\n\
float32 distance\n\
float32 velocity\n\
int32 nobjects  		# number of objects\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, header);
    ros::serialization::serialize(stream, obs);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, header);
    ros::serialization::deserialize(stream, obs);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(header);
    size += ros::serialization::serializationLength(obs);
    return size;
  }

  typedef boost::shared_ptr< ::art_msgs::ObservationArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::art_msgs::ObservationArray_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ObservationArray
typedef  ::art_msgs::ObservationArray_<std::allocator<void> > ObservationArray;

typedef boost::shared_ptr< ::art_msgs::ObservationArray> ObservationArrayPtr;
typedef boost::shared_ptr< ::art_msgs::ObservationArray const> ObservationArrayConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::art_msgs::ObservationArray_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::art_msgs::ObservationArray_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace art_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::art_msgs::ObservationArray_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::art_msgs::ObservationArray_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::art_msgs::ObservationArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b5eeab09687abc64c329078cb1e9065a";
  }

  static const char* value(const  ::art_msgs::ObservationArray_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb5eeab09687abc64ULL;
  static const uint64_t static_value2 = 0xc329078cb1e9065aULL;
};

template<class ContainerAllocator>
struct DataType< ::art_msgs::ObservationArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "art_msgs/ObservationArray";
  }

  static const char* value(const  ::art_msgs::ObservationArray_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::art_msgs::ObservationArray_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Observations from a set of observers\n\
# $Id$\n\
\n\
Header header\n\
Observation[] obs                       # vector of observations\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: art_msgs/Observation\n\
# result returned from a single observer\n\
# $Id$\n\
\n\
# possible observer ID values\n\
int32 Nearest_forward    = 0		# current or closest lane\n\
int32 Nearest_backward   = 1                  \n\
int32 Adjacent_left	 = 2		# adjacent left or right lane\n\
int32 Adjacent_right	 = 3\n\
int32 All_left		 = 4		# all left or right lanes\n\
int32 All_right 	 = 5\n\
int32 Merge_into_nearest = 6            # merge into nearest lane on diff seg\n\
int32 Merge_across_all   = 7            # merge across all lanes on diff seg\n\
int32 Intersection	 = 8		# stop sign intersection precedence\n\
int32 N_Observers        = 9\n\
\n\
int32  oid                      # observer ID\n\
string name                     # observer name\n\
\n\
bool applicable                 # true if obseravation is applicable\n\
bool clear                      # true if clear to go\n\
\n\
# optional time and distance to nearest obstacle\n\
# (only reported by some observers)\n\
float32 time\n\
float32 distance\n\
float32 velocity\n\
int32 nobjects  		# number of objects\n\
\n\
";
  }

  static const char* value(const  ::art_msgs::ObservationArray_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::art_msgs::ObservationArray_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::art_msgs::ObservationArray_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::art_msgs::ObservationArray_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.obs);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ObservationArray_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::art_msgs::ObservationArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::art_msgs::ObservationArray_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "obs[]" << std::endl;
    for (size_t i = 0; i < v.obs.size(); ++i)
    {
      s << indent << "  obs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::art_msgs::Observation_<ContainerAllocator> >::stream(s, indent + "    ", v.obs[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ART_MSGS_MESSAGE_OBSERVATIONARRAY_H

