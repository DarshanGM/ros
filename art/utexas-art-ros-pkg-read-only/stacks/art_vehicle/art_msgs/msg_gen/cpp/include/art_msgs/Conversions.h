/* Auto-generated by genmsg_cpp for file /home/james/ros/art/utexas-art-ros-pkg-read-only/stacks/art_vehicle/art_msgs/msg/Conversions.msg */
#ifndef ART_MSGS_MESSAGE_CONVERSIONS_H
#define ART_MSGS_MESSAGE_CONVERSIONS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace art_msgs
{
template <class ContainerAllocator>
struct Conversions_ {
  typedef Conversions_<ContainerAllocator> Type;

  Conversions_()
  {
  }

  Conversions_(const ContainerAllocator& _alloc)
  {
  }

  static const double CM_PER_INCH;
  static const double CM_PER_METER;
  static const double INCHES_PER_FOOT;
  static const double METERS_PER_FOOT;
  static const double METERS_PER_MILE;
  static const double MMETERS_PER_KM;
  static const double MMETERS_PER_MILE;
  enum { MINUTES_PER_HOUR = 60 };
  enum { SECONDS_PER_MINUTE = 60 };
  enum { SECONDS_PER_HOUR = 3600 };

private:
  static const char* __s_getDataType_() { return "art_msgs/Conversions"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "44629a726979d07e4fc2da05a3fca804"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "#  Units conversion constants\n\
#\n\
#  Copyright (C) 2007, 2009 Austin Robot Technology                    \n\
#  License: Modified BSD Software License Agreement\n\
\n\
#  $Id$\n\
\n\
# Unit conversion constants:\n\
\n\
float64 CM_PER_INCH = 2.54\n\
float64 CM_PER_METER = 100.0\n\
float64 INCHES_PER_FOOT = 12.0\n\
float64 METERS_PER_FOOT = 0.3048\n\
float64 METERS_PER_MILE = 1609.344\n\
float64 MMETERS_PER_KM = 1000000.0\n\
float64 MMETERS_PER_MILE = 1609344.0\n\
\n\
int64 MINUTES_PER_HOUR = 60\n\
int64 SECONDS_PER_MINUTE = 60\n\
int64 SECONDS_PER_HOUR = 3600\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    return size;
  }

  typedef boost::shared_ptr< ::art_msgs::Conversions_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::art_msgs::Conversions_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Conversions
typedef  ::art_msgs::Conversions_<std::allocator<void> > Conversions;

typedef boost::shared_ptr< ::art_msgs::Conversions> ConversionsPtr;
typedef boost::shared_ptr< ::art_msgs::Conversions const> ConversionsConstPtr;

template<typename ContainerAllocator> const double Conversions_<ContainerAllocator>::CM_PER_INCH = 2.54;
template<typename ContainerAllocator> const double Conversions_<ContainerAllocator>::CM_PER_METER = 100.0;
template<typename ContainerAllocator> const double Conversions_<ContainerAllocator>::INCHES_PER_FOOT = 12.0;
template<typename ContainerAllocator> const double Conversions_<ContainerAllocator>::METERS_PER_FOOT = 0.3048;
template<typename ContainerAllocator> const double Conversions_<ContainerAllocator>::METERS_PER_MILE = 1609.344;
template<typename ContainerAllocator> const double Conversions_<ContainerAllocator>::MMETERS_PER_KM = 1000000.0;
template<typename ContainerAllocator> const double Conversions_<ContainerAllocator>::MMETERS_PER_MILE = 1609344.0;

template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::art_msgs::Conversions_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::art_msgs::Conversions_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace art_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::art_msgs::Conversions_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::art_msgs::Conversions_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::art_msgs::Conversions_<ContainerAllocator> > {
  static const char* value() 
  {
    return "44629a726979d07e4fc2da05a3fca804";
  }

  static const char* value(const  ::art_msgs::Conversions_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x44629a726979d07eULL;
  static const uint64_t static_value2 = 0x4fc2da05a3fca804ULL;
};

template<class ContainerAllocator>
struct DataType< ::art_msgs::Conversions_<ContainerAllocator> > {
  static const char* value() 
  {
    return "art_msgs/Conversions";
  }

  static const char* value(const  ::art_msgs::Conversions_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::art_msgs::Conversions_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#  Units conversion constants\n\
#\n\
#  Copyright (C) 2007, 2009 Austin Robot Technology                    \n\
#  License: Modified BSD Software License Agreement\n\
\n\
#  $Id$\n\
\n\
# Unit conversion constants:\n\
\n\
float64 CM_PER_INCH = 2.54\n\
float64 CM_PER_METER = 100.0\n\
float64 INCHES_PER_FOOT = 12.0\n\
float64 METERS_PER_FOOT = 0.3048\n\
float64 METERS_PER_MILE = 1609.344\n\
float64 MMETERS_PER_KM = 1000000.0\n\
float64 MMETERS_PER_MILE = 1609344.0\n\
\n\
int64 MINUTES_PER_HOUR = 60\n\
int64 SECONDS_PER_MINUTE = 60\n\
int64 SECONDS_PER_HOUR = 3600\n\
\n\
";
  }

  static const char* value(const  ::art_msgs::Conversions_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::art_msgs::Conversions_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::art_msgs::Conversions_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Conversions_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::art_msgs::Conversions_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::art_msgs::Conversions_<ContainerAllocator> & v) 
  {
  }
};


} // namespace message_operations
} // namespace ros

#endif // ART_MSGS_MESSAGE_CONVERSIONS_H

