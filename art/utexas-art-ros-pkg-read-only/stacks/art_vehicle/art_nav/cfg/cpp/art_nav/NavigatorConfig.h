//#line 2 "/opt/ros/electric/stacks/driver_common/dynamic_reconfigure/templates/ConfigType.h"
// *********************************************************
// 
// File autogenerated for the art_nav package 
// by the dynamic_reconfigure package.
// Please do not edit.
// 
// ********************************************************/

/***********************************************************
 * Software License Agreement (BSD License)
 *
 *  Copyright (c) 2008, Willow Garage, Inc.
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of the Willow Garage nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 ***********************************************************/

// Author: Blaise Gassend


#ifndef __art_nav__NAVIGATORCONFIG_H__
#define __art_nav__NAVIGATORCONFIG_H__

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/config_init_mutex.h>

namespace art_nav
{
  class NavigatorConfigStatics;
  
  class NavigatorConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l, 
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      
      virtual void clamp(NavigatorConfig &config, const NavigatorConfig &max, const NavigatorConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const NavigatorConfig &config1, const NavigatorConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, NavigatorConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const NavigatorConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, NavigatorConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const NavigatorConfig &config) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;
    
    template <class T>
    class ParamDescription : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string name, std::string type, uint32_t level, 
          std::string description, std::string edit_method, T NavigatorConfig::* f) :
        AbstractParamDescription(name, type, level, description, edit_method),
        field(f)
      {}

      T (NavigatorConfig::* field);

      virtual void clamp(NavigatorConfig &config, const NavigatorConfig &max, const NavigatorConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;
        
        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const NavigatorConfig &config1, const NavigatorConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, NavigatorConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const NavigatorConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, NavigatorConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const NavigatorConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }
    };

//#line 55 "../cfg/Navigator.cfg"
      double blockage_timeout_secs;
//#line 57 "../cfg/Navigator.cfg"
      double close_stopping_distance;
//#line 59 "../cfg/Navigator.cfg"
      double desired_following_time;
//#line 61 "../cfg/Navigator.cfg"
      double heading_change_ratio;
//#line 63 "../cfg/Navigator.cfg"
      double initialize_distance;
//#line 65 "../cfg/Navigator.cfg"
      double initialize_min_angle;
//#line 67 "../cfg/Navigator.cfg"
      double lane_change_secs;
//#line 69 "../cfg/Navigator.cfg"
      double lane_width_ratio;
//#line 71 "../cfg/Navigator.cfg"
      double lookahead_distance;
//#line 73 "../cfg/Navigator.cfg"
      double lost_speed;
//#line 75 "../cfg/Navigator.cfg"
      double max_creep_distance;
//#line 77 "../cfg/Navigator.cfg"
      double max_deceleration;
//#line 79 "../cfg/Navigator.cfg"
      double max_speed;
//#line 81 "../cfg/Navigator.cfg"
      double max_speed_for_sharp;
//#line 83 "../cfg/Navigator.cfg"
      double max_yaw_rate;
//#line 85 "../cfg/Navigator.cfg"
      double min_approach_speed;
//#line 87 "../cfg/Navigator.cfg"
      double min_curve_length;
//#line 89 "../cfg/Navigator.cfg"
      double min_following_time;
//#line 91 "../cfg/Navigator.cfg"
      double min_lane_steer_dist;
//#line 93 "../cfg/Navigator.cfg"
      double min_speed_for_curves;
//#line 95 "../cfg/Navigator.cfg"
      double min_stop_distance;
//#line 97 "../cfg/Navigator.cfg"
      bool offensive_driving;
//#line 99 "../cfg/Navigator.cfg"
      double passing_delay;
//#line 103 "../cfg/Navigator.cfg"
      double passing_distance;
//#line 107 "../cfg/Navigator.cfg"
      double passing_clearance_ahead;
//#line 111 "../cfg/Navigator.cfg"
      double passing_clearance_behind;
//#line 113 "../cfg/Navigator.cfg"
      double passing_speed;
//#line 115 "../cfg/Navigator.cfg"
      double precedence_delay;
//#line 117 "../cfg/Navigator.cfg"
      double real_max_yaw_rate;
//#line 119 "../cfg/Navigator.cfg"
      double roadblock_delay;
//#line 121 "../cfg/Navigator.cfg"
      double spot_waypoint_radius;
//#line 123 "../cfg/Navigator.cfg"
      double spring_lookahead;
//#line 125 "../cfg/Navigator.cfg"
      double stop_approach_speed;
//#line 127 "../cfg/Navigator.cfg"
      double stop_creep_speed;
//#line 129 "../cfg/Navigator.cfg"
      double stop_deceleration;
//#line 131 "../cfg/Navigator.cfg"
      double stop_distance;
//#line 133 "../cfg/Navigator.cfg"
      double stop_latency;
//#line 135 "../cfg/Navigator.cfg"
      double stop_line_delay;
//#line 137 "../cfg/Navigator.cfg"
      double turning_heading_tune;
//#line 139 "../cfg/Navigator.cfg"
      double turning_int_tune;
//#line 141 "../cfg/Navigator.cfg"
      double turning_latency;
//#line 143 "../cfg/Navigator.cfg"
      double turning_offset_tune;
//#line 145 "../cfg/Navigator.cfg"
      double uturn_speed;
//#line 147 "../cfg/Navigator.cfg"
      double uturn_stop_heading;
//#line 149 "../cfg/Navigator.cfg"
      double uturn_threshold;
//#line 151 "../cfg/Navigator.cfg"
      double uturn_yaw_rate;
//#line 153 "../cfg/Navigator.cfg"
      double zone_waypoint_radius;
//#line 138 "/opt/ros/electric/stacks/driver_common/dynamic_reconfigure/templates/ConfigType.h"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        if ((*i)->fromMessage(msg, *this))
          count++;
      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("NavigatorConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->toMessage(msg, *this);
    }
    
    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      __toMessage__(msg, __param_descriptions__);
    }
    
    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->fromServer(nh, *this);
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const NavigatorConfig &__max__ = __getMax__();
      const NavigatorConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const NavigatorConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->calcLevel(level, config, *this);
      return level;
    }
    
    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const NavigatorConfig &__getDefault__();
    static const NavigatorConfig &__getMax__();
    static const NavigatorConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    
  private:
    static const NavigatorConfigStatics *__get_statics__();
  };
  
  template <> // Max and min are ignored for strings.
  inline void NavigatorConfig::ParamDescription<std::string>::clamp(NavigatorConfig &config, const NavigatorConfig &max, const NavigatorConfig &min) const
  {
    return;
  }

  class NavigatorConfigStatics
  {
    friend class NavigatorConfig;
    
    NavigatorConfigStatics()
    {
//#line 55 "../cfg/Navigator.cfg"
      __min__.blockage_timeout_secs = 0.0;
//#line 55 "../cfg/Navigator.cfg"
      __max__.blockage_timeout_secs = 20.0;
//#line 55 "../cfg/Navigator.cfg"
      __default__.blockage_timeout_secs = 9.0;
//#line 55 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("blockage_timeout_secs", "double", 0, "Blockage timeout (s)", "", &NavigatorConfig::blockage_timeout_secs)));
//#line 57 "../cfg/Navigator.cfg"
      __min__.close_stopping_distance = 5.0;
//#line 57 "../cfg/Navigator.cfg"
      __max__.close_stopping_distance = 20.0;
//#line 57 "../cfg/Navigator.cfg"
      __default__.close_stopping_distance = 15.3;
//#line 57 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("close_stopping_distance", "double", 0, "Distance to stop from an obstacle (m)", "", &NavigatorConfig::close_stopping_distance)));
//#line 59 "../cfg/Navigator.cfg"
      __min__.desired_following_time = 0.0;
//#line 59 "../cfg/Navigator.cfg"
      __max__.desired_following_time = 10.0;
//#line 59 "../cfg/Navigator.cfg"
      __default__.desired_following_time = 5.0;
//#line 59 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("desired_following_time", "double", 0, "Desired following time (s)", "", &NavigatorConfig::desired_following_time)));
//#line 61 "../cfg/Navigator.cfg"
      __min__.heading_change_ratio = 0.0;
//#line 61 "../cfg/Navigator.cfg"
      __max__.heading_change_ratio = 1.0;
//#line 61 "../cfg/Navigator.cfg"
      __default__.heading_change_ratio = 0.75;
//#line 61 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("heading_change_ratio", "double", 0, "Heading change ratio", "", &NavigatorConfig::heading_change_ratio)));
//#line 63 "../cfg/Navigator.cfg"
      __min__.initialize_distance = 0.0;
//#line 63 "../cfg/Navigator.cfg"
      __max__.initialize_distance = 30.0;
//#line 63 "../cfg/Navigator.cfg"
      __default__.initialize_distance = 10.0;
//#line 63 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("initialize_distance", "double", 0, "Initialize look ahead distance (m)", "", &NavigatorConfig::initialize_distance)));
//#line 65 "../cfg/Navigator.cfg"
      __min__.initialize_min_angle = 0.0;
//#line 65 "../cfg/Navigator.cfg"
      __max__.initialize_min_angle = 3.14159265359;
//#line 65 "../cfg/Navigator.cfg"
      __default__.initialize_min_angle = 0.785398163397;
//#line 65 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("initialize_min_angle", "double", 0, "Initialize minimum angle (radians)", "", &NavigatorConfig::initialize_min_angle)));
//#line 67 "../cfg/Navigator.cfg"
      __min__.lane_change_secs = 0.0;
//#line 67 "../cfg/Navigator.cfg"
      __max__.lane_change_secs = 8.0;
//#line 67 "../cfg/Navigator.cfg"
      __default__.lane_change_secs = 2.0;
//#line 67 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("lane_change_secs", "double", 0, "Lane change target (seconds ahead)", "", &NavigatorConfig::lane_change_secs)));
//#line 69 "../cfg/Navigator.cfg"
      __min__.lane_width_ratio = 0.01;
//#line 69 "../cfg/Navigator.cfg"
      __max__.lane_width_ratio = 1.0;
//#line 69 "../cfg/Navigator.cfg"
      __default__.lane_width_ratio = 0.3;
//#line 69 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("lane_width_ratio", "double", 0, "Lane width ration (fraction)", "", &NavigatorConfig::lane_width_ratio)));
//#line 71 "../cfg/Navigator.cfg"
      __min__.lookahead_distance = 0.0;
//#line 71 "../cfg/Navigator.cfg"
      __max__.lookahead_distance = 200.0;
//#line 71 "../cfg/Navigator.cfg"
      __default__.lookahead_distance = 100.0;
//#line 71 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("lookahead_distance", "double", 0, "Turn lookahead distance (m)", "", &NavigatorConfig::lookahead_distance)));
//#line 73 "../cfg/Navigator.cfg"
      __min__.lost_speed = 1.0;
//#line 73 "../cfg/Navigator.cfg"
      __max__.lost_speed = 5.0;
//#line 73 "../cfg/Navigator.cfg"
      __default__.lost_speed = 2.0;
//#line 73 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("lost_speed", "double", 0, "Speed when lost (m/s)", "", &NavigatorConfig::lost_speed)));
//#line 75 "../cfg/Navigator.cfg"
      __min__.max_creep_distance = 0.0;
//#line 75 "../cfg/Navigator.cfg"
      __max__.max_creep_distance = 5.0;
//#line 75 "../cfg/Navigator.cfg"
      __default__.max_creep_distance = 4.8;
//#line 75 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("max_creep_distance", "double", 0, "Distance for which to creep (m)", "", &NavigatorConfig::max_creep_distance)));
//#line 77 "../cfg/Navigator.cfg"
      __min__.max_deceleration = 0.1;
//#line 77 "../cfg/Navigator.cfg"
      __max__.max_deceleration = 4.0;
//#line 77 "../cfg/Navigator.cfg"
      __default__.max_deceleration = 0.4;
//#line 77 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("max_deceleration", "double", 0, "turn max deceleration (m/s^2)", "", &NavigatorConfig::max_deceleration)));
//#line 79 "../cfg/Navigator.cfg"
      __min__.max_speed = 0.0;
//#line 79 "../cfg/Navigator.cfg"
      __max__.max_speed = 25.0;
//#line 79 "../cfg/Navigator.cfg"
      __default__.max_speed = 15.0;
//#line 79 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("max_speed", "double", 0, "Maximum speed ever to request (m/s)", "", &NavigatorConfig::max_speed)));
//#line 81 "../cfg/Navigator.cfg"
      __min__.max_speed_for_sharp = 1.0;
//#line 81 "../cfg/Navigator.cfg"
      __max__.max_speed_for_sharp = 8.0;
//#line 81 "../cfg/Navigator.cfg"
      __default__.max_speed_for_sharp = 3.0;
//#line 81 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("max_speed_for_sharp", "double", 0, "Maximum speed for sharpest possible turn (m/s)", "", &NavigatorConfig::max_speed_for_sharp)));
//#line 83 "../cfg/Navigator.cfg"
      __min__.max_yaw_rate = 0.01;
//#line 83 "../cfg/Navigator.cfg"
      __max__.max_yaw_rate = 2.0;
//#line 83 "../cfg/Navigator.cfg"
      __default__.max_yaw_rate = 0.15;
//#line 83 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("max_yaw_rate", "double", 0, "turn max yaw rate (radians/s)", "", &NavigatorConfig::max_yaw_rate)));
//#line 85 "../cfg/Navigator.cfg"
      __min__.min_approach_speed = 0.0;
//#line 85 "../cfg/Navigator.cfg"
      __max__.min_approach_speed = 5.0;
//#line 85 "../cfg/Navigator.cfg"
      __default__.min_approach_speed = 2.0;
//#line 85 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("min_approach_speed", "double", 0, "Minimum approach speed considered dangerous (m/s)", "", &NavigatorConfig::min_approach_speed)));
//#line 87 "../cfg/Navigator.cfg"
      __min__.min_curve_length = 1.0;
//#line 87 "../cfg/Navigator.cfg"
      __max__.min_curve_length = 5.0;
//#line 87 "../cfg/Navigator.cfg"
      __default__.min_curve_length = 1.5;
//#line 87 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("min_curve_length", "double", 0, "Minimum curve length for turn (m)", "", &NavigatorConfig::min_curve_length)));
//#line 89 "../cfg/Navigator.cfg"
      __min__.min_following_time = 0.0;
//#line 89 "../cfg/Navigator.cfg"
      __max__.min_following_time = 10.0;
//#line 89 "../cfg/Navigator.cfg"
      __default__.min_following_time = 3.0;
//#line 89 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("min_following_time", "double", 0, "Minimum following time (s)", "", &NavigatorConfig::min_following_time)));
//#line 91 "../cfg/Navigator.cfg"
      __min__.min_lane_steer_dist = 0.0;
//#line 91 "../cfg/Navigator.cfg"
      __max__.min_lane_steer_dist = 16.0;
//#line 91 "../cfg/Navigator.cfg"
      __default__.min_lane_steer_dist = 7.0;
//#line 91 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("min_lane_steer_dist", "double", 0, "Minimum lane steering distance (m)", "", &NavigatorConfig::min_lane_steer_dist)));
//#line 93 "../cfg/Navigator.cfg"
      __min__.min_speed_for_curves = 1.0;
//#line 93 "../cfg/Navigator.cfg"
      __max__.min_speed_for_curves = 5.0;
//#line 93 "../cfg/Navigator.cfg"
      __default__.min_speed_for_curves = 3.0;
//#line 93 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("min_speed_for_curves", "double", 0, "Minimum speed when slowing for curves (m/s)", "", &NavigatorConfig::min_speed_for_curves)));
//#line 95 "../cfg/Navigator.cfg"
      __min__.min_stop_distance = 0.0;
//#line 95 "../cfg/Navigator.cfg"
      __max__.min_stop_distance = 25.0;
//#line 95 "../cfg/Navigator.cfg"
      __default__.min_stop_distance = 5.0;
//#line 95 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("min_stop_distance", "double", 0, "Minimum distance to begin stopping (m)", "", &NavigatorConfig::min_stop_distance)));
//#line 97 "../cfg/Navigator.cfg"
      __min__.offensive_driving = 0;
//#line 97 "../cfg/Navigator.cfg"
      __max__.offensive_driving = 1;
//#line 97 "../cfg/Navigator.cfg"
      __default__.offensive_driving = 0;
//#line 97 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<bool>("offensive_driving", "bool", 0, "Drive aggressively (defensively if false)", "", &NavigatorConfig::offensive_driving)));
//#line 99 "../cfg/Navigator.cfg"
      __min__.passing_delay = 0.0;
//#line 99 "../cfg/Navigator.cfg"
      __max__.passing_delay = 10.0;
//#line 99 "../cfg/Navigator.cfg"
      __default__.passing_delay = 5.0;
//#line 99 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("passing_delay", "double", 0, "Wait time before passing (s)", "", &NavigatorConfig::passing_delay)));
//#line 103 "../cfg/Navigator.cfg"
      __min__.passing_distance = 8.3;
//#line 103 "../cfg/Navigator.cfg"
      __max__.passing_distance = 35.0;
//#line 103 "../cfg/Navigator.cfg"
      __default__.passing_distance = 18.3;
//#line 103 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("passing_distance", "double", 0, "Minimum distance for passing (m)", "", &NavigatorConfig::passing_distance)));
//#line 107 "../cfg/Navigator.cfg"
      __min__.passing_clearance_ahead = 22.7;
//#line 107 "../cfg/Navigator.cfg"
      __max__.passing_clearance_ahead = 50.0;
//#line 107 "../cfg/Navigator.cfg"
      __default__.passing_clearance_ahead = 27.5;
//#line 107 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("passing_clearance_ahead", "double", 0, "Clearance ahead to return from passing (m)", "", &NavigatorConfig::passing_clearance_ahead)));
//#line 111 "../cfg/Navigator.cfg"
      __min__.passing_clearance_behind = 3.5;
//#line 111 "../cfg/Navigator.cfg"
      __max__.passing_clearance_behind = 50.0;
//#line 111 "../cfg/Navigator.cfg"
      __default__.passing_clearance_behind = 5.9;
//#line 111 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("passing_clearance_behind", "double", 0, "Clearance behind to return from passing (m)", "", &NavigatorConfig::passing_clearance_behind)));
//#line 113 "../cfg/Navigator.cfg"
      __min__.passing_speed = 0.0;
//#line 113 "../cfg/Navigator.cfg"
      __max__.passing_speed = 10.0;
//#line 113 "../cfg/Navigator.cfg"
      __default__.passing_speed = 3.0;
//#line 113 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("passing_speed", "double", 0, "Desired speed while passing (m/s)", "", &NavigatorConfig::passing_speed)));
//#line 115 "../cfg/Navigator.cfg"
      __min__.precedence_delay = 0.0;
//#line 115 "../cfg/Navigator.cfg"
      __max__.precedence_delay = 30.0;
//#line 115 "../cfg/Navigator.cfg"
      __default__.precedence_delay = 10.0;
//#line 115 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("precedence_delay", "double", 0, "Wait time for intersection precedence (s)", "", &NavigatorConfig::precedence_delay)));
//#line 117 "../cfg/Navigator.cfg"
      __min__.real_max_yaw_rate = 0.1;
//#line 117 "../cfg/Navigator.cfg"
      __max__.real_max_yaw_rate = 2.0;
//#line 117 "../cfg/Navigator.cfg"
      __default__.real_max_yaw_rate = 0.9;
//#line 117 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("real_max_yaw_rate", "double", 0, "Real maximum yaw rate (radians/s)", "", &NavigatorConfig::real_max_yaw_rate)));
//#line 119 "../cfg/Navigator.cfg"
      __min__.roadblock_delay = 0.0;
//#line 119 "../cfg/Navigator.cfg"
      __max__.roadblock_delay = 10.0;
//#line 119 "../cfg/Navigator.cfg"
      __default__.roadblock_delay = 5.0;
//#line 119 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("roadblock_delay", "double", 0, "Wait time for road blockage (s)", "", &NavigatorConfig::roadblock_delay)));
//#line 121 "../cfg/Navigator.cfg"
      __min__.spot_waypoint_radius = 0.1;
//#line 121 "../cfg/Navigator.cfg"
      __max__.spot_waypoint_radius = 4.0;
//#line 121 "../cfg/Navigator.cfg"
      __default__.spot_waypoint_radius = 0.5;
//#line 121 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("spot_waypoint_radius", "double", 0, "Spot waypoint radius (m)", "", &NavigatorConfig::spot_waypoint_radius)));
//#line 123 "../cfg/Navigator.cfg"
      __min__.spring_lookahead = 0.0;
//#line 123 "../cfg/Navigator.cfg"
      __max__.spring_lookahead = 8.0;
//#line 123 "../cfg/Navigator.cfg"
      __default__.spring_lookahead = 0.0;
//#line 123 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("spring_lookahead", "double", 0, "Spring lookahead distance (m)", "", &NavigatorConfig::spring_lookahead)));
//#line 125 "../cfg/Navigator.cfg"
      __min__.stop_approach_speed = 1.0;
//#line 125 "../cfg/Navigator.cfg"
      __max__.stop_approach_speed = 5.0;
//#line 125 "../cfg/Navigator.cfg"
      __default__.stop_approach_speed = 3.0;
//#line 125 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("stop_approach_speed", "double", 0, "Stop line approach speed (m/s)", "", &NavigatorConfig::stop_approach_speed)));
//#line 127 "../cfg/Navigator.cfg"
      __min__.stop_creep_speed = 0.5;
//#line 127 "../cfg/Navigator.cfg"
      __max__.stop_creep_speed = 3.0;
//#line 127 "../cfg/Navigator.cfg"
      __default__.stop_creep_speed = 1.0;
//#line 127 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("stop_creep_speed", "double", 0, "Speed while creeping to stop (m/s)", "", &NavigatorConfig::stop_creep_speed)));
//#line 129 "../cfg/Navigator.cfg"
      __min__.stop_deceleration = 0.05;
//#line 129 "../cfg/Navigator.cfg"
      __max__.stop_deceleration = 4.0;
//#line 129 "../cfg/Navigator.cfg"
      __default__.stop_deceleration = 2.0;
//#line 129 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("stop_deceleration", "double", 0, "Desired stopping deceleration (m/s^2)", "", &NavigatorConfig::stop_deceleration)));
//#line 131 "../cfg/Navigator.cfg"
      __min__.stop_distance = 0.0;
//#line 131 "../cfg/Navigator.cfg"
      __max__.stop_distance = 4.0;
//#line 131 "../cfg/Navigator.cfg"
      __default__.stop_distance = 2.0;
//#line 131 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("stop_distance", "double", 0, "Desired stopping distance (m)", "", &NavigatorConfig::stop_distance)));
//#line 133 "../cfg/Navigator.cfg"
      __min__.stop_latency = 0.0;
//#line 133 "../cfg/Navigator.cfg"
      __max__.stop_latency = 4.0;
//#line 133 "../cfg/Navigator.cfg"
      __default__.stop_latency = 0.0;
//#line 133 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("stop_latency", "double", 0, "Brake latency for stopping (s)", "", &NavigatorConfig::stop_latency)));
//#line 135 "../cfg/Navigator.cfg"
      __min__.stop_line_delay = 0.0;
//#line 135 "../cfg/Navigator.cfg"
      __max__.stop_line_delay = 10.0;
//#line 135 "../cfg/Navigator.cfg"
      __default__.stop_line_delay = 1.0;
//#line 135 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("stop_line_delay", "double", 0, "Delay when stop line reached (s)", "", &NavigatorConfig::stop_line_delay)));
//#line 137 "../cfg/Navigator.cfg"
      __min__.turning_heading_tune = 0.0;
//#line 137 "../cfg/Navigator.cfg"
      __max__.turning_heading_tune = 1.0;
//#line 137 "../cfg/Navigator.cfg"
      __default__.turning_heading_tune = 0.5;
//#line 137 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("turning_heading_tune", "double", 0, "yaw tuning parameter (heading)", "", &NavigatorConfig::turning_heading_tune)));
//#line 139 "../cfg/Navigator.cfg"
      __min__.turning_int_tune = 0.0;
//#line 139 "../cfg/Navigator.cfg"
      __max__.turning_int_tune = 4.0;
//#line 139 "../cfg/Navigator.cfg"
      __default__.turning_int_tune = 1.25;
//#line 139 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("turning_int_tune", "double", 0, "yaw tuning parameter (integral)", "", &NavigatorConfig::turning_int_tune)));
//#line 141 "../cfg/Navigator.cfg"
      __min__.turning_latency = 0.0;
//#line 141 "../cfg/Navigator.cfg"
      __max__.turning_latency = 4.0;
//#line 141 "../cfg/Navigator.cfg"
      __default__.turning_latency = 1.0;
//#line 141 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("turning_latency", "double", 0, "Turning latency time (s)", "", &NavigatorConfig::turning_latency)));
//#line 143 "../cfg/Navigator.cfg"
      __min__.turning_offset_tune = 0.0;
//#line 143 "../cfg/Navigator.cfg"
      __max__.turning_offset_tune = 1.0;
//#line 143 "../cfg/Navigator.cfg"
      __default__.turning_offset_tune = 0.5;
//#line 143 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("turning_offset_tune", "double", 0, "Yaw tuning parameter (offset)", "", &NavigatorConfig::turning_offset_tune)));
//#line 145 "../cfg/Navigator.cfg"
      __min__.uturn_speed = 1.0;
//#line 145 "../cfg/Navigator.cfg"
      __max__.uturn_speed = 4.0;
//#line 145 "../cfg/Navigator.cfg"
      __default__.uturn_speed = 2.0;
//#line 145 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("uturn_speed", "double", 0, "U-turn speed (m/s)", "", &NavigatorConfig::uturn_speed)));
//#line 147 "../cfg/Navigator.cfg"
      __min__.uturn_stop_heading = 0.0;
//#line 147 "../cfg/Navigator.cfg"
      __max__.uturn_stop_heading = 3.14159265359;
//#line 147 "../cfg/Navigator.cfg"
      __default__.uturn_stop_heading = 0.785398163397;
//#line 147 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("uturn_stop_heading", "double", 0, "U-turn stop heading (radians)", "", &NavigatorConfig::uturn_stop_heading)));
//#line 149 "../cfg/Navigator.cfg"
      __min__.uturn_threshold = 0.0;
//#line 149 "../cfg/Navigator.cfg"
      __max__.uturn_threshold = 4.0;
//#line 149 "../cfg/Navigator.cfg"
      __default__.uturn_threshold = 1.0;
//#line 149 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("uturn_threshold", "double", 0, "U-turn threshold (m)", "", &NavigatorConfig::uturn_threshold)));
//#line 151 "../cfg/Navigator.cfg"
      __min__.uturn_yaw_rate = 0.5;
//#line 151 "../cfg/Navigator.cfg"
      __max__.uturn_yaw_rate = 3.0;
//#line 151 "../cfg/Navigator.cfg"
      __default__.uturn_yaw_rate = 1.5;
//#line 151 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("uturn_yaw_rate", "double", 0, "U-turn yaw rate (radians/s)", "", &NavigatorConfig::uturn_yaw_rate)));
//#line 153 "../cfg/Navigator.cfg"
      __min__.zone_waypoint_radius = 0.1;
//#line 153 "../cfg/Navigator.cfg"
      __max__.zone_waypoint_radius = 4.0;
//#line 153 "../cfg/Navigator.cfg"
      __default__.zone_waypoint_radius = 1.0;
//#line 153 "../cfg/Navigator.cfg"
      __param_descriptions__.push_back(NavigatorConfig::AbstractParamDescriptionConstPtr(new NavigatorConfig::ParamDescription<double>("zone_waypoint_radius", "double", 0, "Zone waypoint radius (m)", "", &NavigatorConfig::zone_waypoint_radius)));
//#line 239 "/opt/ros/electric/stacks/driver_common/dynamic_reconfigure/templates/ConfigType.h"
    
      for (std::vector<NavigatorConfig::AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        __description_message__.parameters.push_back(**i);
      __max__.__toMessage__(__description_message__.max, __param_descriptions__); 
      __min__.__toMessage__(__description_message__.min, __param_descriptions__); 
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__); 
    }
    std::vector<NavigatorConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    NavigatorConfig __max__;
    NavigatorConfig __min__;
    NavigatorConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;
    static const NavigatorConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static NavigatorConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &NavigatorConfig::__getDescriptionMessage__() 
  {
    return __get_statics__()->__description_message__;
  }

  inline const NavigatorConfig &NavigatorConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }
  
  inline const NavigatorConfig &NavigatorConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }
  
  inline const NavigatorConfig &NavigatorConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }
  
  inline const std::vector<NavigatorConfig::AbstractParamDescriptionConstPtr> &NavigatorConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const NavigatorConfigStatics *NavigatorConfig::__get_statics__()
  {
    const static NavigatorConfigStatics *statics;
  
    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = NavigatorConfigStatics::get_instance();
    
    return statics;
  }


}

#endif // __NAVIGATORRECONFIGURATOR_H__
