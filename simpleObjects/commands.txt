To run Gazebo:

    $ roslaunch erratic_description erratic_empty_world.launch

This will launch Gazebo. In this case it will load an empty world other than
a robotic car.


The rest of the following commands will be executed in a seperate terminal.
For this demonstration, we will generate a few objects and apply forces to them.
Change directory into the directory that was unzipped - "ros".
There should be 3 urdf files in there, "ball.urdf", "cube.urdf" and "rect.urdf".
URDF is the Unified Robot Description Format for describing robot models
in a XML format. In this case, we are using very simple models.


Create an object:
    $ rosrun gazebo spawn_model -file `pwd`/rect.urdf -urdf -z 1 -model rect
    
This should create a rectangular blue object in Gazebo. You should be able to
see the model appear in the list on the left as "rect".


Viewing - You can use the mouse to move the view around. Scrolling zooms in,
while the left mouse button rotates the camera. The right mouse button moves the
camera around.


To view the world's properties:
    $ rosservice call gazebo/get_world_properties
    
If you want to look at a specific model's properties e.g. rect
    $ rosservice call gazebo/get_model_properties '{model_name: rect}'
    

Finally, we can apply a force to our rect object.
    $ rosservice call gazebo/apply_body_wrench '{body_name: "rect::rect" , wrench: { torque: { x: -10000, y: 0 , z: 0 } }, duration: 1000000 }'
    
The rectangle object should flip and fall.
To clear any forces on rect object, and ensure it's stable:
    $ rosservice call gazebo/clear_body_wrenches '{body_name: "rect::rect"}'


To create another object - the cube - and apply a similar force, run the following:
rosrun gazebo spawn_model -file `pwd`/cube.urdf -urdf -z 1 -model cube
rosservice call gazebo/get_world_properties
rosservice call gazebo/get_model_properties '{model_name: cube}'
rosservice call gazebo/apply_body_wrench '{body_name: "cube::cube" , wrench: { torque: { x: -10000, y: 0 , z: 0 } }, duration: 1000000 }'
rosservice call gazebo/clear_body_wrenches '{body_name: "cube::cube"}'

The cube and rect should collide.
To drive the robotic car around, run:
    $ rosrun erratic_teleop erratic_keyboard_teleop
    
You should be able to collide with those objects.

Finally, to delete those objects:
    $ rosservice call gazebo/delete_model '{model_name: rect}'
    $ rosservice call gazebo/delete_model '{model_name: cube}'
    
I've also written a simple ball model for more interaction, and to view how objects might roll in Gazebo.
A full list of commands is listed below for further experimentation / use.


# Install Gazebo / Configure
rosdep install gazebo_worlds
sudo apt-get install ros-electric-erratic-robot
rosmake gazebo_worlds
roslaunch erratic_description erratic_empty_world.launch

# Spawn and Delete Rectangle
rosrun gazebo spawn_model -file `pwd`/rect.urdf -urdf -z 1 -model rect
rosservice call gazebo/get_world_properties
rosservice call gazebo/get_model_properties '{model_name: rect}'
rosservice call gazebo/apply_body_wrench '{body_name: "rect::rect" , wrench: { torque: { x: -10000, y: 0 , z: 0 } }, duration: 1000000 }'
rosservice call gazebo/clear_body_wrenches '{body_name: "rect::rect"}'
rosservice call gazebo/delete_model '{model_name: rect}'

# Spawn and Delete Cube
rosrun gazebo spawn_model -file `pwd`/cube.urdf -urdf -z 1 -model cube
rosservice call gazebo/get_world_properties
rosservice call gazebo/get_model_properties '{model_name: cube}'
rosservice call gazebo/apply_body_wrench '{body_name: "cube::cube" , wrench: { torque: { x: -10000, y: 0 , z: 0 } }, duration: 1000000 }'
rosservice call gazebo/clear_body_wrenches '{body_name: "cube::cube"}'
rosservice call gazebo/delete_model '{model_name: cube}'

# Spawn and Delete Ball
rosrun gazebo spawn_model -file `pwd`/ball.urdf -urdf -z 1 -model ball
rosservice call gazebo/get_world_properties
rosservice call gazebo/get_model_properties '{model_name: ball}'
rosservice call gazebo/apply_body_wrench '{body_name: "ball::ball" , wrench: { torque: { x: -1000, y: 0 , z: 0 } }, duration: 1000000 }'
rosservice call gazebo/clear_body_wrenches '{body_name: "ball::ball"}'
rosservice call gazebo/delete_model '{model_name: ball}'

# Use robotic car
rosrun erratic_teleop erratic_keyboard_teleop
