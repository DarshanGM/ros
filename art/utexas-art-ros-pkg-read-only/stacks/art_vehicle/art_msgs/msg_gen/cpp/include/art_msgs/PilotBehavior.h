/* Auto-generated by genmsg_cpp for file /home/james/ros/art/utexas-art-ros-pkg-read-only/stacks/art_vehicle/art_msgs/msg/PilotBehavior.msg */
#ifndef ART_MSGS_MESSAGE_PILOTBEHAVIOR_H
#define ART_MSGS_MESSAGE_PILOTBEHAVIOR_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace art_msgs
{
template <class ContainerAllocator>
struct PilotBehavior_ {
  typedef PilotBehavior_<ContainerAllocator> Type;

  PilotBehavior_()
  : value(0)
  {
  }

  PilotBehavior_(const ContainerAllocator& _alloc)
  : value(0)
  {
  }

  typedef uint8_t _value_type;
  uint8_t value;

  enum { Run = 0 };
  enum { Pause = 1 };
  enum { Off = 2 };
  enum { N_behaviors = 3 };

private:
  static const char* __s_getDataType_() { return "art_msgs/PilotBehavior"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "ee280e8dd8b427f32f9742e8b4885525"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# ART autonomous vehicle pilot node behaviors.\n\
#\n\
# Normally, the pilot node does Run, continually sending commands to\n\
# the servo device actuators and monitoring their state.  With Pause,\n\
# the pilot becomes passive, allowing a learning algorithm or human\n\
# controller direct access to those devices.  In the Off state,\n\
# various devices are shut down: the transmission in Park, the brake\n\
# released, the throttle at idle.  The engine is not turned off, but\n\
# it could be.\n\
\n\
# $Id$\n\
\n\
# Behavior value\n\
uint8 value\n\
\n\
# Behavior numbers:\n\
uint8 Run = 0                   # normal driving\n\
uint8 Pause = 1                 # stop issuing servo commands\n\
uint8 Off = 2                   # turn off devices\n\
uint8 N_behaviors = 3\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, value);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, value);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(value);
    return size;
  }

  typedef boost::shared_ptr< ::art_msgs::PilotBehavior_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::art_msgs::PilotBehavior_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PilotBehavior
typedef  ::art_msgs::PilotBehavior_<std::allocator<void> > PilotBehavior;

typedef boost::shared_ptr< ::art_msgs::PilotBehavior> PilotBehaviorPtr;
typedef boost::shared_ptr< ::art_msgs::PilotBehavior const> PilotBehaviorConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::art_msgs::PilotBehavior_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::art_msgs::PilotBehavior_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace art_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::art_msgs::PilotBehavior_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::art_msgs::PilotBehavior_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::art_msgs::PilotBehavior_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ee280e8dd8b427f32f9742e8b4885525";
  }

  static const char* value(const  ::art_msgs::PilotBehavior_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xee280e8dd8b427f3ULL;
  static const uint64_t static_value2 = 0x2f9742e8b4885525ULL;
};

template<class ContainerAllocator>
struct DataType< ::art_msgs::PilotBehavior_<ContainerAllocator> > {
  static const char* value() 
  {
    return "art_msgs/PilotBehavior";
  }

  static const char* value(const  ::art_msgs::PilotBehavior_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::art_msgs::PilotBehavior_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ART autonomous vehicle pilot node behaviors.\n\
#\n\
# Normally, the pilot node does Run, continually sending commands to\n\
# the servo device actuators and monitoring their state.  With Pause,\n\
# the pilot becomes passive, allowing a learning algorithm or human\n\
# controller direct access to those devices.  In the Off state,\n\
# various devices are shut down: the transmission in Park, the brake\n\
# released, the throttle at idle.  The engine is not turned off, but\n\
# it could be.\n\
\n\
# $Id$\n\
\n\
# Behavior value\n\
uint8 value\n\
\n\
# Behavior numbers:\n\
uint8 Run = 0                   # normal driving\n\
uint8 Pause = 1                 # stop issuing servo commands\n\
uint8 Off = 2                   # turn off devices\n\
uint8 N_behaviors = 3\n\
\n\
";
  }

  static const char* value(const  ::art_msgs::PilotBehavior_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::art_msgs::PilotBehavior_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::art_msgs::PilotBehavior_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.value);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PilotBehavior_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::art_msgs::PilotBehavior_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::art_msgs::PilotBehavior_<ContainerAllocator> & v) 
  {
    s << indent << "value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.value);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ART_MSGS_MESSAGE_PILOTBEHAVIOR_H

