/* Auto-generated by genmsg_cpp for file /home/james/ros/art/utexas-art-ros-pkg-read-only/stacks/art_vehicle/art_msgs/msg/Gear.msg */
#ifndef ART_MSGS_MESSAGE_GEAR_H
#define ART_MSGS_MESSAGE_GEAR_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace art_msgs
{
template <class ContainerAllocator>
struct Gear_ {
  typedef Gear_<ContainerAllocator> Type;

  Gear_()
  : value(0)
  {
  }

  Gear_(const ContainerAllocator& _alloc)
  : value(0)
  {
  }

  typedef uint8_t _value_type;
  uint8_t value;

  enum { Naught = 0 };
  enum { Park = 1 };
  enum { Reverse = 2 };
  enum { Neutral = 3 };
  enum { Drive = 4 };
  enum { N_gears = 5 };

private:
  static const char* __s_getDataType_() { return "art_msgs/Gear"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "29fb8bb2d87a1850e27a57ff47d6dd35"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# ART vehicle transmission gear numbers\n\
#\n\
# Used by several different messages.\n\
\n\
# $Id$\n\
\n\
# Gear numbers. \n\
#\n\
# Naught means: reset all Shifter relays; no change of CarDrive gear.\n\
uint8 Naught = 0\n\
uint8 Park = 1\n\
uint8 Reverse = 2\n\
uint8 Neutral = 3\n\
uint8 Drive = 4\n\
uint8 N_gears = 5\n\
\n\
uint8 value		# requested or reported gear number\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, value);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, value);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(value);
    return size;
  }

  typedef boost::shared_ptr< ::art_msgs::Gear_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::art_msgs::Gear_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Gear
typedef  ::art_msgs::Gear_<std::allocator<void> > Gear;

typedef boost::shared_ptr< ::art_msgs::Gear> GearPtr;
typedef boost::shared_ptr< ::art_msgs::Gear const> GearConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::art_msgs::Gear_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::art_msgs::Gear_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace art_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::art_msgs::Gear_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::art_msgs::Gear_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::art_msgs::Gear_<ContainerAllocator> > {
  static const char* value() 
  {
    return "29fb8bb2d87a1850e27a57ff47d6dd35";
  }

  static const char* value(const  ::art_msgs::Gear_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x29fb8bb2d87a1850ULL;
  static const uint64_t static_value2 = 0xe27a57ff47d6dd35ULL;
};

template<class ContainerAllocator>
struct DataType< ::art_msgs::Gear_<ContainerAllocator> > {
  static const char* value() 
  {
    return "art_msgs/Gear";
  }

  static const char* value(const  ::art_msgs::Gear_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::art_msgs::Gear_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ART vehicle transmission gear numbers\n\
#\n\
# Used by several different messages.\n\
\n\
# $Id$\n\
\n\
# Gear numbers. \n\
#\n\
# Naught means: reset all Shifter relays; no change of CarDrive gear.\n\
uint8 Naught = 0\n\
uint8 Park = 1\n\
uint8 Reverse = 2\n\
uint8 Neutral = 3\n\
uint8 Drive = 4\n\
uint8 N_gears = 5\n\
\n\
uint8 value		# requested or reported gear number\n\
\n\
";
  }

  static const char* value(const  ::art_msgs::Gear_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::art_msgs::Gear_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::art_msgs::Gear_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.value);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Gear_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::art_msgs::Gear_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::art_msgs::Gear_<ContainerAllocator> & v) 
  {
    s << indent << "value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.value);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ART_MSGS_MESSAGE_GEAR_H

