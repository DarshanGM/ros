/* Auto-generated by genmsg_cpp for file /home/james/ros/art/utexas-art-ros-pkg-read-only/stacks/art_vehicle/art_msgs/msg/DriverState.msg */
#ifndef ART_MSGS_MESSAGE_DRIVERSTATE_H
#define ART_MSGS_MESSAGE_DRIVERSTATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace art_msgs
{
template <class ContainerAllocator>
struct DriverState_ {
  typedef DriverState_<ContainerAllocator> Type;

  DriverState_()
  : state(0)
  {
  }

  DriverState_(const ContainerAllocator& _alloc)
  : state(0)
  {
  }

  typedef uint32_t _state_type;
  uint32_t state;

  enum { CLOSED = 0 };
  enum { OPENED = 1 };
  enum { RUNNING = 2 };

private:
  static const char* __s_getDataType_() { return "art_msgs/DriverState"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "92d8e6361001072f038b293728a430f0"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# ART driver states -- similar to those in driver_base.\n\
\n\
# $Id$\n\
\n\
# constants\n\
uint32 CLOSED = 0       # Not connected to the hardware\n\
uint32 OPENED = 1       # Passively connected to the hardware\n\
uint32 RUNNING = 2      # Sending hardware commands\n\
\n\
uint32 state\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, state);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, state);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(state);
    return size;
  }

  typedef boost::shared_ptr< ::art_msgs::DriverState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::art_msgs::DriverState_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DriverState
typedef  ::art_msgs::DriverState_<std::allocator<void> > DriverState;

typedef boost::shared_ptr< ::art_msgs::DriverState> DriverStatePtr;
typedef boost::shared_ptr< ::art_msgs::DriverState const> DriverStateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::art_msgs::DriverState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::art_msgs::DriverState_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace art_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::art_msgs::DriverState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::art_msgs::DriverState_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::art_msgs::DriverState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "92d8e6361001072f038b293728a430f0";
  }

  static const char* value(const  ::art_msgs::DriverState_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x92d8e6361001072fULL;
  static const uint64_t static_value2 = 0x038b293728a430f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::art_msgs::DriverState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "art_msgs/DriverState";
  }

  static const char* value(const  ::art_msgs::DriverState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::art_msgs::DriverState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ART driver states -- similar to those in driver_base.\n\
\n\
# $Id$\n\
\n\
# constants\n\
uint32 CLOSED = 0       # Not connected to the hardware\n\
uint32 OPENED = 1       # Passively connected to the hardware\n\
uint32 RUNNING = 2      # Sending hardware commands\n\
\n\
uint32 state\n\
\n\
";
  }

  static const char* value(const  ::art_msgs::DriverState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::art_msgs::DriverState_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::art_msgs::DriverState_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.state);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DriverState_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::art_msgs::DriverState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::art_msgs::DriverState_<ContainerAllocator> & v) 
  {
    s << indent << "state: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.state);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ART_MSGS_MESSAGE_DRIVERSTATE_H

