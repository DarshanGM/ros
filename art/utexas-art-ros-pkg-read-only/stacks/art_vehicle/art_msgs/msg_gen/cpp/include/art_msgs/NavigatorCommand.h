/* Auto-generated by genmsg_cpp for file /home/james/ros/art/utexas-art-ros-pkg-read-only/stacks/art_vehicle/art_msgs/msg/NavigatorCommand.msg */
#ifndef ART_MSGS_MESSAGE_NAVIGATORCOMMAND_H
#define ART_MSGS_MESSAGE_NAVIGATORCOMMAND_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "art_msgs/Order.h"

namespace art_msgs
{
template <class ContainerAllocator>
struct NavigatorCommand_ {
  typedef NavigatorCommand_<ContainerAllocator> Type;

  NavigatorCommand_()
  : header()
  , order()
  {
  }

  NavigatorCommand_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , order(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef  ::art_msgs::Order_<ContainerAllocator>  _order_type;
   ::art_msgs::Order_<ContainerAllocator>  order;


private:
  static const char* __s_getDataType_() { return "art_msgs/NavigatorCommand"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "415e5ee8b2ed1c9329a949ed123760f3"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# navigator command message\n\
# $Id$\n\
\n\
Header header\n\
Order  order\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: art_msgs/Order\n\
# commander order for the navigator\n\
# $Id$\n\
\n\
uint32 N_WAYPTS = 5     		# number of way-points in order\n\
uint32 N_CHKPTS = 2             	# number of checkpoints in order\n\
\n\
Behavior behavior			# requested behavior\n\
art_msgs/WayPoint[5] waypt       	# way-point array\n\
art_msgs/WayPoint[2] chkpt       	# next two goal checkpoints\n\
float32 min_speed			# in meters/sec\n\
float32 max_speed\n\
int32 replan_num\n\
int32 next_uturn         		# Uturn between [1] and [2]\n\
\n\
================================================================================\n\
MSG: art_msgs/Behavior\n\
# ART Navigator behaviors (lower numbers have higher priority)\n\
# $Id$\n\
\n\
# enumerated behavior values\n\
int16 Abort       = 0\n\
int16 Quit        = 1\n\
int16 Pause       = 2\n\
int16 Run         = 3\n\
int16 Suspend     = 4\n\
int16 Initialize  = 5\n\
int16 Go          = 6\n\
int16 NONE        = 7\n\
int16 N_behaviors = 8\n\
\n\
int16 value\n\
\n\
================================================================================\n\
MSG: art_msgs/WayPoint\n\
# Way-point attributes\n\
# $Id$\n\
\n\
float64 latitude			# latitude in degrees\n\
float64 longitude			# longitude in degrees\n\
geometry_msgs/Point32 mapxy		# MapXY position\n\
MapID id				# way-point ID\n\
uint16 index    			# parser index of waypoint\n\
\n\
# way-point flags\n\
bool is_entry                           # lane or zone exit point\n\
bool is_exit				# lane or zone entry point\n\
bool is_goal				# this is a goal checkpoint\n\
bool is_lane_change			# change lanes after here\n\
bool is_spot				# parking spot\n\
bool is_stop				# stop line here\n\
bool is_perimeter			# zone perimeter point\n\
int32 checkpoint_id			# checkpoint ID or zero\n\
float32 lane_width\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: art_msgs/MapID\n\
# Road map identifier for segments, lanes and way-points.\n\
# $Id$\n\
\n\
uint16 NULL_ID = 65535\n\
\n\
uint16 seg      # segment ID\n\
uint16 lane     # lane ID\n\
uint16 pt       # way-point ID\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, header);
    ros::serialization::serialize(stream, order);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, header);
    ros::serialization::deserialize(stream, order);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(header);
    size += ros::serialization::serializationLength(order);
    return size;
  }

  typedef boost::shared_ptr< ::art_msgs::NavigatorCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::art_msgs::NavigatorCommand_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct NavigatorCommand
typedef  ::art_msgs::NavigatorCommand_<std::allocator<void> > NavigatorCommand;

typedef boost::shared_ptr< ::art_msgs::NavigatorCommand> NavigatorCommandPtr;
typedef boost::shared_ptr< ::art_msgs::NavigatorCommand const> NavigatorCommandConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::art_msgs::NavigatorCommand_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::art_msgs::NavigatorCommand_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace art_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::art_msgs::NavigatorCommand_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::art_msgs::NavigatorCommand_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::art_msgs::NavigatorCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "415e5ee8b2ed1c9329a949ed123760f3";
  }

  static const char* value(const  ::art_msgs::NavigatorCommand_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x415e5ee8b2ed1c93ULL;
  static const uint64_t static_value2 = 0x29a949ed123760f3ULL;
};

template<class ContainerAllocator>
struct DataType< ::art_msgs::NavigatorCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "art_msgs/NavigatorCommand";
  }

  static const char* value(const  ::art_msgs::NavigatorCommand_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::art_msgs::NavigatorCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# navigator command message\n\
# $Id$\n\
\n\
Header header\n\
Order  order\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: art_msgs/Order\n\
# commander order for the navigator\n\
# $Id$\n\
\n\
uint32 N_WAYPTS = 5     		# number of way-points in order\n\
uint32 N_CHKPTS = 2             	# number of checkpoints in order\n\
\n\
Behavior behavior			# requested behavior\n\
art_msgs/WayPoint[5] waypt       	# way-point array\n\
art_msgs/WayPoint[2] chkpt       	# next two goal checkpoints\n\
float32 min_speed			# in meters/sec\n\
float32 max_speed\n\
int32 replan_num\n\
int32 next_uturn         		# Uturn between [1] and [2]\n\
\n\
================================================================================\n\
MSG: art_msgs/Behavior\n\
# ART Navigator behaviors (lower numbers have higher priority)\n\
# $Id$\n\
\n\
# enumerated behavior values\n\
int16 Abort       = 0\n\
int16 Quit        = 1\n\
int16 Pause       = 2\n\
int16 Run         = 3\n\
int16 Suspend     = 4\n\
int16 Initialize  = 5\n\
int16 Go          = 6\n\
int16 NONE        = 7\n\
int16 N_behaviors = 8\n\
\n\
int16 value\n\
\n\
================================================================================\n\
MSG: art_msgs/WayPoint\n\
# Way-point attributes\n\
# $Id$\n\
\n\
float64 latitude			# latitude in degrees\n\
float64 longitude			# longitude in degrees\n\
geometry_msgs/Point32 mapxy		# MapXY position\n\
MapID id				# way-point ID\n\
uint16 index    			# parser index of waypoint\n\
\n\
# way-point flags\n\
bool is_entry                           # lane or zone exit point\n\
bool is_exit				# lane or zone entry point\n\
bool is_goal				# this is a goal checkpoint\n\
bool is_lane_change			# change lanes after here\n\
bool is_spot				# parking spot\n\
bool is_stop				# stop line here\n\
bool is_perimeter			# zone perimeter point\n\
int32 checkpoint_id			# checkpoint ID or zero\n\
float32 lane_width\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: art_msgs/MapID\n\
# Road map identifier for segments, lanes and way-points.\n\
# $Id$\n\
\n\
uint16 NULL_ID = 65535\n\
\n\
uint16 seg      # segment ID\n\
uint16 lane     # lane ID\n\
uint16 pt       # way-point ID\n\
\n\
";
  }

  static const char* value(const  ::art_msgs::NavigatorCommand_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::art_msgs::NavigatorCommand_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::art_msgs::NavigatorCommand_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::art_msgs::NavigatorCommand_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.order);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct NavigatorCommand_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::art_msgs::NavigatorCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::art_msgs::NavigatorCommand_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "order: ";
s << std::endl;
    Printer< ::art_msgs::Order_<ContainerAllocator> >::stream(s, indent + "  ", v.order);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ART_MSGS_MESSAGE_NAVIGATORCOMMAND_H

