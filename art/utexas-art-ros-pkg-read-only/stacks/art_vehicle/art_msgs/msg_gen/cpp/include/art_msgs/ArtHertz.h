/* Auto-generated by genmsg_cpp for file /home/james/ros/art/utexas-art-ros-pkg-read-only/stacks/art_vehicle/art_msgs/msg/ArtHertz.msg */
#ifndef ART_MSGS_MESSAGE_ARTHERTZ_H
#define ART_MSGS_MESSAGE_ARTHERTZ_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace art_msgs
{
template <class ContainerAllocator>
struct ArtHertz_ {
  typedef ArtHertz_<ContainerAllocator> Type;

  ArtHertz_()
  {
  }

  ArtHertz_(const ContainerAllocator& _alloc)
  {
  }

  static const double APPLANIX;
  static const double BRAKE;
  static const double COMMANDER;
  static const double IOADR;
  static const double LASER_FUSION;
  static const double LASER_NOISE;
  static const double MAPLANES;
  static const double NAVIGATOR;
  static const double OBSERVERS;
  static const double PILOT;
  static const double PSEUDO_LASER;
  static const double SICKFAST;
  static const double STEERING;
  static const double THROTTLE;
  static const double VEHICLE_TF;

private:
  static const char* __s_getDataType_() { return "art_msgs/ArtHertz"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "fe3d67243941cb078e664e9bc369f978"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "#  Real-time cycle rates for various ART vehicle nodes.\n\
# $Id$\n\
\n\
#  All units are hertz (cycles/second).  This is not a published\n\
#  message, it defines multi-language constants.\n\
\n\
float64 APPLANIX        = 20.0\n\
float64 BRAKE           = 20.0\n\
float64 COMMANDER       = 10.0\n\
float64 IOADR           = 10.0\n\
float64 LASER_FUSION    = 10.0\n\
float64 LASER_NOISE     = 10.0\n\
float64 MAPLANES        = 5.0\n\
float64 NAVIGATOR       = 20.0\n\
float64 OBSERVERS       = 10.0\n\
float64 PILOT           = 20.0\n\
float64 PSEUDO_LASER    = 10.0\n\
float64 SICKFAST        = 10.0\n\
float64 STEERING        = 20.0\n\
float64 THROTTLE        = 20.0\n\
float64 VEHICLE_TF      = 5.0\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    return size;
  }

  typedef boost::shared_ptr< ::art_msgs::ArtHertz_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::art_msgs::ArtHertz_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ArtHertz
typedef  ::art_msgs::ArtHertz_<std::allocator<void> > ArtHertz;

typedef boost::shared_ptr< ::art_msgs::ArtHertz> ArtHertzPtr;
typedef boost::shared_ptr< ::art_msgs::ArtHertz const> ArtHertzConstPtr;

template<typename ContainerAllocator> const double ArtHertz_<ContainerAllocator>::APPLANIX = 20.0;
template<typename ContainerAllocator> const double ArtHertz_<ContainerAllocator>::BRAKE = 20.0;
template<typename ContainerAllocator> const double ArtHertz_<ContainerAllocator>::COMMANDER = 10.0;
template<typename ContainerAllocator> const double ArtHertz_<ContainerAllocator>::IOADR = 10.0;
template<typename ContainerAllocator> const double ArtHertz_<ContainerAllocator>::LASER_FUSION = 10.0;
template<typename ContainerAllocator> const double ArtHertz_<ContainerAllocator>::LASER_NOISE = 10.0;
template<typename ContainerAllocator> const double ArtHertz_<ContainerAllocator>::MAPLANES = 5.0;
template<typename ContainerAllocator> const double ArtHertz_<ContainerAllocator>::NAVIGATOR = 20.0;
template<typename ContainerAllocator> const double ArtHertz_<ContainerAllocator>::OBSERVERS = 10.0;
template<typename ContainerAllocator> const double ArtHertz_<ContainerAllocator>::PILOT = 20.0;
template<typename ContainerAllocator> const double ArtHertz_<ContainerAllocator>::PSEUDO_LASER = 10.0;
template<typename ContainerAllocator> const double ArtHertz_<ContainerAllocator>::SICKFAST = 10.0;
template<typename ContainerAllocator> const double ArtHertz_<ContainerAllocator>::STEERING = 20.0;
template<typename ContainerAllocator> const double ArtHertz_<ContainerAllocator>::THROTTLE = 20.0;
template<typename ContainerAllocator> const double ArtHertz_<ContainerAllocator>::VEHICLE_TF = 5.0;

template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::art_msgs::ArtHertz_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::art_msgs::ArtHertz_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace art_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::art_msgs::ArtHertz_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::art_msgs::ArtHertz_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::art_msgs::ArtHertz_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fe3d67243941cb078e664e9bc369f978";
  }

  static const char* value(const  ::art_msgs::ArtHertz_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfe3d67243941cb07ULL;
  static const uint64_t static_value2 = 0x8e664e9bc369f978ULL;
};

template<class ContainerAllocator>
struct DataType< ::art_msgs::ArtHertz_<ContainerAllocator> > {
  static const char* value() 
  {
    return "art_msgs/ArtHertz";
  }

  static const char* value(const  ::art_msgs::ArtHertz_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::art_msgs::ArtHertz_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#  Real-time cycle rates for various ART vehicle nodes.\n\
# $Id$\n\
\n\
#  All units are hertz (cycles/second).  This is not a published\n\
#  message, it defines multi-language constants.\n\
\n\
float64 APPLANIX        = 20.0\n\
float64 BRAKE           = 20.0\n\
float64 COMMANDER       = 10.0\n\
float64 IOADR           = 10.0\n\
float64 LASER_FUSION    = 10.0\n\
float64 LASER_NOISE     = 10.0\n\
float64 MAPLANES        = 5.0\n\
float64 NAVIGATOR       = 20.0\n\
float64 OBSERVERS       = 10.0\n\
float64 PILOT           = 20.0\n\
float64 PSEUDO_LASER    = 10.0\n\
float64 SICKFAST        = 10.0\n\
float64 STEERING        = 20.0\n\
float64 THROTTLE        = 20.0\n\
float64 VEHICLE_TF      = 5.0\n\
\n\
";
  }

  static const char* value(const  ::art_msgs::ArtHertz_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::art_msgs::ArtHertz_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::art_msgs::ArtHertz_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ArtHertz_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::art_msgs::ArtHertz_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::art_msgs::ArtHertz_<ContainerAllocator> & v) 
  {
  }
};


} // namespace message_operations
} // namespace ros

#endif // ART_MSGS_MESSAGE_ARTHERTZ_H

