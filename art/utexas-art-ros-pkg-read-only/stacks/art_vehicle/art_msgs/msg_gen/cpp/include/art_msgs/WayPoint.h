/* Auto-generated by genmsg_cpp for file /home/james/ros/art/utexas-art-ros-pkg-read-only/stacks/art_vehicle/art_msgs/msg/WayPoint.msg */
#ifndef ART_MSGS_MESSAGE_WAYPOINT_H
#define ART_MSGS_MESSAGE_WAYPOINT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Point32.h"
#include "art_msgs/MapID.h"

namespace art_msgs
{
template <class ContainerAllocator>
struct WayPoint_ {
  typedef WayPoint_<ContainerAllocator> Type;

  WayPoint_()
  : latitude(0.0)
  , longitude(0.0)
  , mapxy()
  , id()
  , index(0)
  , is_entry(false)
  , is_exit(false)
  , is_goal(false)
  , is_lane_change(false)
  , is_spot(false)
  , is_stop(false)
  , is_perimeter(false)
  , checkpoint_id(0)
  , lane_width(0.0)
  {
  }

  WayPoint_(const ContainerAllocator& _alloc)
  : latitude(0.0)
  , longitude(0.0)
  , mapxy(_alloc)
  , id(_alloc)
  , index(0)
  , is_entry(false)
  , is_exit(false)
  , is_goal(false)
  , is_lane_change(false)
  , is_spot(false)
  , is_stop(false)
  , is_perimeter(false)
  , checkpoint_id(0)
  , lane_width(0.0)
  {
  }

  typedef double _latitude_type;
  double latitude;

  typedef double _longitude_type;
  double longitude;

  typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _mapxy_type;
   ::geometry_msgs::Point32_<ContainerAllocator>  mapxy;

  typedef  ::art_msgs::MapID_<ContainerAllocator>  _id_type;
   ::art_msgs::MapID_<ContainerAllocator>  id;

  typedef uint16_t _index_type;
  uint16_t index;

  typedef uint8_t _is_entry_type;
  uint8_t is_entry;

  typedef uint8_t _is_exit_type;
  uint8_t is_exit;

  typedef uint8_t _is_goal_type;
  uint8_t is_goal;

  typedef uint8_t _is_lane_change_type;
  uint8_t is_lane_change;

  typedef uint8_t _is_spot_type;
  uint8_t is_spot;

  typedef uint8_t _is_stop_type;
  uint8_t is_stop;

  typedef uint8_t _is_perimeter_type;
  uint8_t is_perimeter;

  typedef int32_t _checkpoint_id_type;
  int32_t checkpoint_id;

  typedef float _lane_width_type;
  float lane_width;


private:
  static const char* __s_getDataType_() { return "art_msgs/WayPoint"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "93d7bd4ade2e33f8e836f5cd46c71e50"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# Way-point attributes\n\
# $Id$\n\
\n\
float64 latitude			# latitude in degrees\n\
float64 longitude			# longitude in degrees\n\
geometry_msgs/Point32 mapxy		# MapXY position\n\
MapID id				# way-point ID\n\
uint16 index    			# parser index of waypoint\n\
\n\
# way-point flags\n\
bool is_entry                           # lane or zone exit point\n\
bool is_exit				# lane or zone entry point\n\
bool is_goal				# this is a goal checkpoint\n\
bool is_lane_change			# change lanes after here\n\
bool is_spot				# parking spot\n\
bool is_stop				# stop line here\n\
bool is_perimeter			# zone perimeter point\n\
int32 checkpoint_id			# checkpoint ID or zero\n\
float32 lane_width\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: art_msgs/MapID\n\
# Road map identifier for segments, lanes and way-points.\n\
# $Id$\n\
\n\
uint16 NULL_ID = 65535\n\
\n\
uint16 seg      # segment ID\n\
uint16 lane     # lane ID\n\
uint16 pt       # way-point ID\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, latitude);
    ros::serialization::serialize(stream, longitude);
    ros::serialization::serialize(stream, mapxy);
    ros::serialization::serialize(stream, id);
    ros::serialization::serialize(stream, index);
    ros::serialization::serialize(stream, is_entry);
    ros::serialization::serialize(stream, is_exit);
    ros::serialization::serialize(stream, is_goal);
    ros::serialization::serialize(stream, is_lane_change);
    ros::serialization::serialize(stream, is_spot);
    ros::serialization::serialize(stream, is_stop);
    ros::serialization::serialize(stream, is_perimeter);
    ros::serialization::serialize(stream, checkpoint_id);
    ros::serialization::serialize(stream, lane_width);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, latitude);
    ros::serialization::deserialize(stream, longitude);
    ros::serialization::deserialize(stream, mapxy);
    ros::serialization::deserialize(stream, id);
    ros::serialization::deserialize(stream, index);
    ros::serialization::deserialize(stream, is_entry);
    ros::serialization::deserialize(stream, is_exit);
    ros::serialization::deserialize(stream, is_goal);
    ros::serialization::deserialize(stream, is_lane_change);
    ros::serialization::deserialize(stream, is_spot);
    ros::serialization::deserialize(stream, is_stop);
    ros::serialization::deserialize(stream, is_perimeter);
    ros::serialization::deserialize(stream, checkpoint_id);
    ros::serialization::deserialize(stream, lane_width);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(latitude);
    size += ros::serialization::serializationLength(longitude);
    size += ros::serialization::serializationLength(mapxy);
    size += ros::serialization::serializationLength(id);
    size += ros::serialization::serializationLength(index);
    size += ros::serialization::serializationLength(is_entry);
    size += ros::serialization::serializationLength(is_exit);
    size += ros::serialization::serializationLength(is_goal);
    size += ros::serialization::serializationLength(is_lane_change);
    size += ros::serialization::serializationLength(is_spot);
    size += ros::serialization::serializationLength(is_stop);
    size += ros::serialization::serializationLength(is_perimeter);
    size += ros::serialization::serializationLength(checkpoint_id);
    size += ros::serialization::serializationLength(lane_width);
    return size;
  }

  typedef boost::shared_ptr< ::art_msgs::WayPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::art_msgs::WayPoint_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct WayPoint
typedef  ::art_msgs::WayPoint_<std::allocator<void> > WayPoint;

typedef boost::shared_ptr< ::art_msgs::WayPoint> WayPointPtr;
typedef boost::shared_ptr< ::art_msgs::WayPoint const> WayPointConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::art_msgs::WayPoint_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::art_msgs::WayPoint_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace art_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::art_msgs::WayPoint_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::art_msgs::WayPoint_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::art_msgs::WayPoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "93d7bd4ade2e33f8e836f5cd46c71e50";
  }

  static const char* value(const  ::art_msgs::WayPoint_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x93d7bd4ade2e33f8ULL;
  static const uint64_t static_value2 = 0xe836f5cd46c71e50ULL;
};

template<class ContainerAllocator>
struct DataType< ::art_msgs::WayPoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "art_msgs/WayPoint";
  }

  static const char* value(const  ::art_msgs::WayPoint_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::art_msgs::WayPoint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Way-point attributes\n\
# $Id$\n\
\n\
float64 latitude			# latitude in degrees\n\
float64 longitude			# longitude in degrees\n\
geometry_msgs/Point32 mapxy		# MapXY position\n\
MapID id				# way-point ID\n\
uint16 index    			# parser index of waypoint\n\
\n\
# way-point flags\n\
bool is_entry                           # lane or zone exit point\n\
bool is_exit				# lane or zone entry point\n\
bool is_goal				# this is a goal checkpoint\n\
bool is_lane_change			# change lanes after here\n\
bool is_spot				# parking spot\n\
bool is_stop				# stop line here\n\
bool is_perimeter			# zone perimeter point\n\
int32 checkpoint_id			# checkpoint ID or zero\n\
float32 lane_width\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: art_msgs/MapID\n\
# Road map identifier for segments, lanes and way-points.\n\
# $Id$\n\
\n\
uint16 NULL_ID = 65535\n\
\n\
uint16 seg      # segment ID\n\
uint16 lane     # lane ID\n\
uint16 pt       # way-point ID\n\
\n\
";
  }

  static const char* value(const  ::art_msgs::WayPoint_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::art_msgs::WayPoint_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::art_msgs::WayPoint_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.latitude);
    stream.next(m.longitude);
    stream.next(m.mapxy);
    stream.next(m.id);
    stream.next(m.index);
    stream.next(m.is_entry);
    stream.next(m.is_exit);
    stream.next(m.is_goal);
    stream.next(m.is_lane_change);
    stream.next(m.is_spot);
    stream.next(m.is_stop);
    stream.next(m.is_perimeter);
    stream.next(m.checkpoint_id);
    stream.next(m.lane_width);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct WayPoint_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::art_msgs::WayPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::art_msgs::WayPoint_<ContainerAllocator> & v) 
  {
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "mapxy: ";
s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.mapxy);
    s << indent << "id: ";
s << std::endl;
    Printer< ::art_msgs::MapID_<ContainerAllocator> >::stream(s, indent + "  ", v.id);
    s << indent << "index: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.index);
    s << indent << "is_entry: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_entry);
    s << indent << "is_exit: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_exit);
    s << indent << "is_goal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_goal);
    s << indent << "is_lane_change: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_lane_change);
    s << indent << "is_spot: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_spot);
    s << indent << "is_stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_stop);
    s << indent << "is_perimeter: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_perimeter);
    s << indent << "checkpoint_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.checkpoint_id);
    s << indent << "lane_width: ";
    Printer<float>::stream(s, indent + "  ", v.lane_width);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ART_MSGS_MESSAGE_WAYPOINT_H

