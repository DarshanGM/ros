/* Auto-generated by genmsg_cpp for file /home/james/ros/art/utexas-art-ros-pkg-read-only/stacks/art_vehicle/art_msgs/msg/IOadrState.msg */
#ifndef ART_MSGS_MESSAGE_IOADRSTATE_H
#define ART_MSGS_MESSAGE_IOADRSTATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace art_msgs
{
template <class ContainerAllocator>
struct IOadrState_ {
  typedef IOadrState_<ContainerAllocator> Type;

  IOadrState_()
  : header()
  , relays(0)
  , digitalB(0)
  , voltages()
  {
    voltages.assign(0.0);
  }

  IOadrState_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , relays(0)
  , digitalB(0)
  , voltages()
  {
    voltages.assign(0.0);
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef uint8_t _relays_type;
  uint8_t relays;

  typedef uint8_t _digitalB_type;
  uint8_t digitalB;

  typedef boost::array<float, 3>  _voltages_type;
  boost::array<float, 3>  voltages;

  enum { ENABLED = 1 };
  enum { RUN = 2 };
  enum { FLASHER = 4 };
  enum { ALARM = 8 };
  enum { LASER_FRONT = 16 };
  enum { LASER_TOP = 32 };
  enum { TURN_LEFT = 64 };
  enum { TURN_RIGHT = 128 };
  enum { N_VOLTAGES = 3 };

  ROS_DEPRECATED uint32_t get_voltages_size() const { return (uint32_t)voltages.size(); }
private:
  static const char* __s_getDataType_() { return "art_msgs/IOadrState"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "990cf1675736cc78e57b4a0463dd540e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# NCD IOADR8x controller state message for ART vehicle\n\
\n\
# $Id$\n\
\n\
Header  header\n\
\n\
# constant bit values for relays and digitalB inputs\n\
uint8 ENABLED      =   1\n\
uint8 RUN          =   2\n\
uint8 FLASHER      =   4\n\
uint8 ALARM        =   8\n\
uint8 LASER_FRONT  =  16\n\
uint8 LASER_TOP    =  32\n\
uint8 TURN_LEFT    =  64\n\
uint8 TURN_RIGHT   = 128\n\
\n\
uint8   relays                  # current relays settings\n\
\n\
uint8   digitalB                # digital input B\n\
\n\
# generally, voltages[0] is the steering position sensor\n\
int32 N_VOLTAGES = 3            # number of analog voltages\n\
float32[3] voltages             # analog voltages [A, B, C]\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, header);
    ros::serialization::serialize(stream, relays);
    ros::serialization::serialize(stream, digitalB);
    ros::serialization::serialize(stream, voltages);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, header);
    ros::serialization::deserialize(stream, relays);
    ros::serialization::deserialize(stream, digitalB);
    ros::serialization::deserialize(stream, voltages);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(header);
    size += ros::serialization::serializationLength(relays);
    size += ros::serialization::serializationLength(digitalB);
    size += ros::serialization::serializationLength(voltages);
    return size;
  }

  typedef boost::shared_ptr< ::art_msgs::IOadrState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::art_msgs::IOadrState_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct IOadrState
typedef  ::art_msgs::IOadrState_<std::allocator<void> > IOadrState;

typedef boost::shared_ptr< ::art_msgs::IOadrState> IOadrStatePtr;
typedef boost::shared_ptr< ::art_msgs::IOadrState const> IOadrStateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::art_msgs::IOadrState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::art_msgs::IOadrState_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace art_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::art_msgs::IOadrState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::art_msgs::IOadrState_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::art_msgs::IOadrState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "990cf1675736cc78e57b4a0463dd540e";
  }

  static const char* value(const  ::art_msgs::IOadrState_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x990cf1675736cc78ULL;
  static const uint64_t static_value2 = 0xe57b4a0463dd540eULL;
};

template<class ContainerAllocator>
struct DataType< ::art_msgs::IOadrState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "art_msgs/IOadrState";
  }

  static const char* value(const  ::art_msgs::IOadrState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::art_msgs::IOadrState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# NCD IOADR8x controller state message for ART vehicle\n\
\n\
# $Id$\n\
\n\
Header  header\n\
\n\
# constant bit values for relays and digitalB inputs\n\
uint8 ENABLED      =   1\n\
uint8 RUN          =   2\n\
uint8 FLASHER      =   4\n\
uint8 ALARM        =   8\n\
uint8 LASER_FRONT  =  16\n\
uint8 LASER_TOP    =  32\n\
uint8 TURN_LEFT    =  64\n\
uint8 TURN_RIGHT   = 128\n\
\n\
uint8   relays                  # current relays settings\n\
\n\
uint8   digitalB                # digital input B\n\
\n\
# generally, voltages[0] is the steering position sensor\n\
int32 N_VOLTAGES = 3            # number of analog voltages\n\
float32[3] voltages             # analog voltages [A, B, C]\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::art_msgs::IOadrState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::art_msgs::IOadrState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::art_msgs::IOadrState_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::art_msgs::IOadrState_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.relays);
    stream.next(m.digitalB);
    stream.next(m.voltages);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct IOadrState_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::art_msgs::IOadrState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::art_msgs::IOadrState_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "relays: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.relays);
    s << indent << "digitalB: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.digitalB);
    s << indent << "voltages[]" << std::endl;
    for (size_t i = 0; i < v.voltages.size(); ++i)
    {
      s << indent << "  voltages[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.voltages[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ART_MSGS_MESSAGE_IOADRSTATE_H

