#! /usr/bin/env python
#*
#*  Copyright (c) 2010, Jack O'Quin
#*  All rights reserved.
#*
#*  Redistribution and use in source and binary forms, with or without
#*  modification, are permitted provided that the following conditions
#*  are met:
#*
#*   * Redistributions of source code must retain the above copyright
#*     notice, this list of conditions and the following disclaimer.
#*   * Redistributions in binary form must reproduce the above
#*     copyright notice, this list of conditions and the following
#*     disclaimer in the documentation and/or other materials provided
#*     with the distribution.
#*   * Neither the name of the author nor the names of other
#*     contributors may be used to endorse or promote products derived
#*     from this software without specific prior written permission.
#*
#*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#*  POSSIBILITY OF SUCH DAMAGE.
#***********************************************************

# navigator node dynamic configuration
# $Id$

PACKAGE='art_nav'
import roslib; roslib.load_manifest(PACKAGE)

import math

from dynamic_reconfigure.parameter_generator import *
from art_msgs.msg import ArtVehicle

# only includes parameters reconfigurable while running
RECONFIGURE_RUNNING = 0                 # reconfiguration level
k_error = 0.5                           # default steering tuning value
gen = ParameterGenerator()

## NOTE: there are many parameters, please alphabetize them

#       Name, Type, Reconfiguration level, Description, Default, Min, Max

gen.add("blockage_timeout_secs", double_t, RECONFIGURE_RUNNING,
        "Blockage timeout (s)", 9.0, 0.0, 20.0)
gen.add("close_stopping_distance", double_t, RECONFIGURE_RUNNING,
        "Distance to stop from an obstacle (m)", 15.3, 5.0, 20.0)
gen.add("desired_following_time", double_t, RECONFIGURE_RUNNING,
        "Desired following time (s)", 5.0, 0.0, 10.0)
gen.add("heading_change_ratio", double_t, RECONFIGURE_RUNNING,
        "Heading change ratio", 0.75, 0.0, 1.0)
gen.add("initialize_distance", double_t, RECONFIGURE_RUNNING,
        "Initialize look ahead distance (m)", 10.0, 0.0, 30.0)
gen.add("initialize_min_angle", double_t, RECONFIGURE_RUNNING,
        "Initialize minimum angle (radians)", math.pi/4.0, 0.0, math.pi)
gen.add("lane_change_secs", double_t, RECONFIGURE_RUNNING,
        "Lane change target (seconds ahead)", 2.0, 0.0, 8.0)
gen.add("lane_width_ratio", double_t, RECONFIGURE_RUNNING,
        "Lane width ration (fraction)", 0.3, 0.01, 1.0)
gen.add("lookahead_distance", double_t, RECONFIGURE_RUNNING,
        "Turn lookahead distance (m)", 100.0, 0.0, 200.0)
gen.add("lost_speed", double_t, RECONFIGURE_RUNNING,
        "Speed when lost (m/s)", 2.0, 1.0, 5.0)
gen.add("max_creep_distance", double_t, RECONFIGURE_RUNNING,
        "Distance for which to creep (m)", ArtVehicle.length, 0.0, 5.0)
gen.add("max_deceleration", double_t, RECONFIGURE_RUNNING,
        "turn max deceleration (m/s^2)", 0.4, 0.1, 4.0)
gen.add("max_speed", double_t, RECONFIGURE_RUNNING,
        "Maximum speed ever to request (m/s)", 15.0, 0.0, 25.0)
gen.add("max_speed_for_sharp", double_t, RECONFIGURE_RUNNING,
        "Maximum speed for sharpest possible turn (m/s)", 3.0, 1.0, 8.0)
gen.add("max_yaw_rate", double_t, RECONFIGURE_RUNNING,
        "turn max yaw rate (radians/s)", 0.15, 0.01, 2.0)
gen.add("min_approach_speed", double_t, RECONFIGURE_RUNNING,
        "Minimum approach speed considered dangerous (m/s)", 2.0, 0.0, 5.0)
gen.add("min_curve_length", double_t, RECONFIGURE_RUNNING,
        "Minimum curve length for turn (m)", 1.5, 1.0, 5.0)
gen.add("min_following_time", double_t, RECONFIGURE_RUNNING,
        "Minimum following time (s)", 3.0, 0.0, 10.0)
gen.add("min_lane_steer_dist", double_t, RECONFIGURE_RUNNING,
        "Minimum lane steering distance (m)", 7.0, 0.0, 16.0)
gen.add("min_speed_for_curves", double_t, RECONFIGURE_RUNNING,
        "Minimum speed when slowing for curves (m/s)", 3.0, 1.0, 5.0)
gen.add("min_stop_distance", double_t, RECONFIGURE_RUNNING,
        "Minimum distance to begin stopping (m)", 5.0, 0.0, 25.0)
gen.add("offensive_driving", bool_t, RECONFIGURE_RUNNING,
        "Drive aggressively (defensively if false)", False)
gen.add("passing_delay", double_t, RECONFIGURE_RUNNING,
        "Wait time before passing (s)", 5.0, 0.0, 10.0)
min_passing = ArtVehicle.length + ArtVehicle.front_bumper_px
gen.add("passing_distance", double_t, RECONFIGURE_RUNNING,
        "Minimum distance for passing (m)",
        10.0+min_passing, min_passing, 35.0)
min_clear_ahead = 4 * ArtVehicle.length + ArtVehicle.front_bumper_px
gen.add("passing_clearance_ahead", double_t, RECONFIGURE_RUNNING,
        "Clearance ahead to return from passing (m)",
        min_clear_ahead+ArtVehicle.length, min_clear_ahead, 50.0)
min_clear_behind = ArtVehicle.length + ArtVehicle.rear_bumper_px
gen.add("passing_clearance_behind", double_t, RECONFIGURE_RUNNING,
        "Clearance behind to return from passing (m)",
        min_clear_behind+0.5*ArtVehicle.length, min_clear_behind, 50.0)
gen.add("passing_speed", double_t, RECONFIGURE_RUNNING,
        "Desired speed while passing (m/s)", 3.0, 0.0, 10.0)
gen.add("precedence_delay", double_t, RECONFIGURE_RUNNING,
        "Wait time for intersection precedence (s)", 10.0, 0.0, 30.0)
gen.add("real_max_yaw_rate", double_t, RECONFIGURE_RUNNING,
        "Real maximum yaw rate (radians/s)", 0.9, 0.1, 2.0)
gen.add("roadblock_delay", double_t, RECONFIGURE_RUNNING,
        "Wait time for road blockage (s)", 5.0, 0.0, 10.0)
gen.add("spot_waypoint_radius", double_t, RECONFIGURE_RUNNING,
        "Spot waypoint radius (m)", 0.5, 0.1, 4.0)
gen.add("spring_lookahead", double_t, RECONFIGURE_RUNNING,
        "Spring lookahead distance (m)", 0.0, 0.0, 8.0) 
gen.add("stop_approach_speed", double_t, RECONFIGURE_RUNNING,
        "Stop line approach speed (m/s)", 3.0, 1.0, 5.0)
gen.add("stop_creep_speed", double_t, RECONFIGURE_RUNNING,
        "Speed while creeping to stop (m/s)", 1.0, 0.5, 3.0)
gen.add("stop_deceleration", double_t, RECONFIGURE_RUNNING,
        "Desired stopping deceleration (m/s^2)", 2.0, 0.05, 4.0)
gen.add("stop_distance", double_t, RECONFIGURE_RUNNING,
        "Desired stopping distance (m)", 2.0, 0.0, 4.0)
gen.add("stop_latency", double_t, RECONFIGURE_RUNNING,
        "Brake latency for stopping (s)", 0.0, 0.0, 4.0)
gen.add("stop_line_delay", double_t, RECONFIGURE_RUNNING,
        "Delay when stop line reached (s)", 1.0, 0.0, 10.0)
gen.add("turning_heading_tune", double_t, RECONFIGURE_RUNNING,
        "yaw tuning parameter (heading)", math.sqrt(k_error/2.0), 0.0, 1.0)
gen.add("turning_int_tune", double_t, RECONFIGURE_RUNNING,
        "yaw tuning parameter (integral)", 1.25, 0.0, 4.0)
gen.add("turning_latency", double_t, RECONFIGURE_RUNNING,
        "Turning latency time (s)", 1.0, 0.0, 4.0)
gen.add("turning_offset_tune", double_t, RECONFIGURE_RUNNING,
        "Yaw tuning parameter (offset)", k_error, 0.0, 1.0)
gen.add("uturn_speed", double_t, RECONFIGURE_RUNNING,
        "U-turn speed (m/s)", 2.0, 1.0, 4.0)
gen.add("uturn_stop_heading", double_t, RECONFIGURE_RUNNING,
        "U-turn stop heading (radians)", math.pi/4.0, 0.0, math.pi)
gen.add("uturn_threshold", double_t, RECONFIGURE_RUNNING,
        "U-turn threshold (m)", 1.0, 0.0, 4.0)
gen.add("uturn_yaw_rate", double_t, RECONFIGURE_RUNNING,
        "U-turn yaw rate (radians/s)", 1.5, 0.5, 3.0)
gen.add("zone_waypoint_radius", double_t, RECONFIGURE_RUNNING,
        "Zone waypoint radius (m)", 1.0, 0.1, 4.0)

exit(gen.generate(PACKAGE, "navigator", "Navigator"))
