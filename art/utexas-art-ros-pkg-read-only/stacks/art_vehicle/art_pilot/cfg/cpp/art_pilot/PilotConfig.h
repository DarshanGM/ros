//#line 2 "/opt/ros/electric/stacks/driver_common/dynamic_reconfigure/templates/ConfigType.h"
// *********************************************************
// 
// File autogenerated for the art_pilot package 
// by the dynamic_reconfigure package.
// Please do not edit.
// 
// ********************************************************/

/***********************************************************
 * Software License Agreement (BSD License)
 *
 *  Copyright (c) 2008, Willow Garage, Inc.
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of the Willow Garage nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 ***********************************************************/

// Author: Blaise Gassend


#ifndef __art_pilot__PILOTCONFIG_H__
#define __art_pilot__PILOTCONFIG_H__

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/config_init_mutex.h>

namespace art_pilot
{
  class PilotConfigStatics;
  
  class PilotConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l, 
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      
      virtual void clamp(PilotConfig &config, const PilotConfig &max, const PilotConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const PilotConfig &config1, const PilotConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, PilotConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const PilotConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, PilotConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const PilotConfig &config) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;
    
    template <class T>
    class ParamDescription : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string name, std::string type, uint32_t level, 
          std::string description, std::string edit_method, T PilotConfig::* f) :
        AbstractParamDescription(name, type, level, description, edit_method),
        field(f)
      {}

      T (PilotConfig::* field);

      virtual void clamp(PilotConfig &config, const PilotConfig &max, const PilotConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;
        
        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const PilotConfig &config1, const PilotConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, PilotConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const PilotConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, PilotConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const PilotConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }
    };

//#line 60 "../cfg/Pilot.cfg"
      int acceleration_controller;
//#line 63 "../cfg/Pilot.cfg"
      double brake_hold;
//#line 67 "../cfg/Pilot.cfg"
      bool human_steering;
//#line 70 "../cfg/Pilot.cfg"
      double limit_forward;
//#line 73 "../cfg/Pilot.cfg"
      double limit_reverse;
//#line 76 "../cfg/Pilot.cfg"
      double timeout;
//#line 79 "../cfg/Pilot.cfg"
      double brake_kp;
//#line 82 "../cfg/Pilot.cfg"
      double brake_ki;
//#line 85 "../cfg/Pilot.cfg"
      double brake_kd;
//#line 88 "../cfg/Pilot.cfg"
      double throttle_kp;
//#line 91 "../cfg/Pilot.cfg"
      double throttle_ki;
//#line 94 "../cfg/Pilot.cfg"
      double throttle_kd;
//#line 138 "/opt/ros/electric/stacks/driver_common/dynamic_reconfigure/templates/ConfigType.h"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        if ((*i)->fromMessage(msg, *this))
          count++;
      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("PilotConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->toMessage(msg, *this);
    }
    
    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      __toMessage__(msg, __param_descriptions__);
    }
    
    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->fromServer(nh, *this);
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const PilotConfig &__max__ = __getMax__();
      const PilotConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const PilotConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        (*i)->calcLevel(level, config, *this);
      return level;
    }
    
    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const PilotConfig &__getDefault__();
    static const PilotConfig &__getMax__();
    static const PilotConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    
  private:
    static const PilotConfigStatics *__get_statics__();
  };
  
  template <> // Max and min are ignored for strings.
  inline void PilotConfig::ParamDescription<std::string>::clamp(PilotConfig &config, const PilotConfig &max, const PilotConfig &min) const
  {
    return;
  }

  class PilotConfigStatics
  {
    friend class PilotConfig;
    
    PilotConfigStatics()
    {
//#line 60 "../cfg/Pilot.cfg"
      __min__.acceleration_controller = -2147483648;
//#line 60 "../cfg/Pilot.cfg"
      __max__.acceleration_controller = 2147483647;
//#line 60 "../cfg/Pilot.cfg"
      __default__.acceleration_controller = 0;
//#line 60 "../cfg/Pilot.cfg"
      __param_descriptions__.push_back(PilotConfig::AbstractParamDescriptionConstPtr(new PilotConfig::ParamDescription<int>("acceleration_controller", "int", 3, "Acceleration controller.", "{'enum_description': 'Acceleration controller options', 'enum': [{'srcline': 50, 'description': 'Plan-based controller', 'srcfile': '../cfg/Pilot.cfg', 'cconsttype': 'const int', 'value': 0, 'ctype': 'int', 'type': 'int', 'name': 'Accel_Plan'}, {'srcline': 51, 'description': 'Acceleration control example', 'srcfile': '../cfg/Pilot.cfg', 'cconsttype': 'const int', 'value': 1, 'ctype': 'int', 'type': 'int', 'name': 'Accel_Example'}, {'srcline': 52, 'description': 'Speed control PID', 'srcfile': '../cfg/Pilot.cfg', 'cconsttype': 'const int', 'value': 2, 'ctype': 'int', 'type': 'int', 'name': 'Speed_PID'}, {'srcline': 53, 'description': 'Speed control matrix', 'srcfile': '../cfg/Pilot.cfg', 'cconsttype': 'const int', 'value': 3, 'ctype': 'int', 'type': 'int', 'name': 'Speed_Matrix'}, {'srcline': 54, 'description': 'Learned speed control', 'srcfile': '../cfg/Pilot.cfg', 'cconsttype': 'const int', 'value': 4, 'ctype': 'int', 'type': 'int', 'name': 'Speed_Learned'}]}", &PilotConfig::acceleration_controller)));
//#line 63 "../cfg/Pilot.cfg"
      __min__.brake_hold = 0.0;
//#line 63 "../cfg/Pilot.cfg"
      __max__.brake_hold = 1.0;
//#line 63 "../cfg/Pilot.cfg"
      __default__.brake_hold = 0.7;
//#line 63 "../cfg/Pilot.cfg"
      __param_descriptions__.push_back(PilotConfig::AbstractParamDescriptionConstPtr(new PilotConfig::ParamDescription<double>("brake_hold", "double", 0, "Brake hold command when stopped.", "", &PilotConfig::brake_hold)));
//#line 67 "../cfg/Pilot.cfg"
      __min__.human_steering = 0;
//#line 67 "../cfg/Pilot.cfg"
      __max__.human_steering = 1;
//#line 67 "../cfg/Pilot.cfg"
      __default__.human_steering = 0;
//#line 67 "../cfg/Pilot.cfg"
      __param_descriptions__.push_back(PilotConfig::AbstractParamDescriptionConstPtr(new PilotConfig::ParamDescription<bool>("human_steering", "bool", 0, "Allow human driver to steer (otherwise pilot steers the car).", "", &PilotConfig::human_steering)));
//#line 70 "../cfg/Pilot.cfg"
      __min__.limit_forward = 0.0;
//#line 70 "../cfg/Pilot.cfg"
      __max__.limit_forward = 25.0;
//#line 70 "../cfg/Pilot.cfg"
      __default__.limit_forward = 14.0;
//#line 70 "../cfg/Pilot.cfg"
      __param_descriptions__.push_back(PilotConfig::AbstractParamDescriptionConstPtr(new PilotConfig::ParamDescription<double>("limit_forward", "double", 0, "Speed limit going forward (m/s).", "", &PilotConfig::limit_forward)));
//#line 73 "../cfg/Pilot.cfg"
      __min__.limit_reverse = 0.0;
//#line 73 "../cfg/Pilot.cfg"
      __max__.limit_reverse = 4.0;
//#line 73 "../cfg/Pilot.cfg"
      __default__.limit_reverse = 3.0;
//#line 73 "../cfg/Pilot.cfg"
      __param_descriptions__.push_back(PilotConfig::AbstractParamDescriptionConstPtr(new PilotConfig::ParamDescription<double>("limit_reverse", "double", 0, "Speed limit going in reverse (m/s).", "", &PilotConfig::limit_reverse)));
//#line 76 "../cfg/Pilot.cfg"
      __min__.timeout = 0.0;
//#line 76 "../cfg/Pilot.cfg"
      __max__.timeout = 1.0;
//#line 76 "../cfg/Pilot.cfg"
      __default__.timeout = 0.5;
//#line 76 "../cfg/Pilot.cfg"
      __param_descriptions__.push_back(PilotConfig::AbstractParamDescriptionConstPtr(new PilotConfig::ParamDescription<double>("timeout", "double", 0, "Device message timeout (s).", "", &PilotConfig::timeout)));
//#line 79 "../cfg/Pilot.cfg"
      __min__.brake_kp = -10.0;
//#line 79 "../cfg/Pilot.cfg"
      __max__.brake_kp = 0.0;
//#line 79 "../cfg/Pilot.cfg"
      __default__.brake_kp = -0.2;
//#line 79 "../cfg/Pilot.cfg"
      __param_descriptions__.push_back(PilotConfig::AbstractParamDescriptionConstPtr(new PilotConfig::ParamDescription<double>("brake_kp", "double", 0, "Brake PID proportional gain (Kp).", "", &PilotConfig::brake_kp)));
//#line 82 "../cfg/Pilot.cfg"
      __min__.brake_ki = -10.0;
//#line 82 "../cfg/Pilot.cfg"
      __max__.brake_ki = 0.0;
//#line 82 "../cfg/Pilot.cfg"
      __default__.brake_ki = -0.0002;
//#line 82 "../cfg/Pilot.cfg"
      __param_descriptions__.push_back(PilotConfig::AbstractParamDescriptionConstPtr(new PilotConfig::ParamDescription<double>("brake_ki", "double", 0, "Brake PID integral gain (Ki).", "", &PilotConfig::brake_ki)));
//#line 85 "../cfg/Pilot.cfg"
      __min__.brake_kd = -10.0;
//#line 85 "../cfg/Pilot.cfg"
      __max__.brake_kd = 0.0;
//#line 85 "../cfg/Pilot.cfg"
      __default__.brake_kd = -1.6;
//#line 85 "../cfg/Pilot.cfg"
      __param_descriptions__.push_back(PilotConfig::AbstractParamDescriptionConstPtr(new PilotConfig::ParamDescription<double>("brake_kd", "double", 0, "Brake PID derivative gain (Kd).", "", &PilotConfig::brake_kd)));
//#line 88 "../cfg/Pilot.cfg"
      __min__.throttle_kp = 0.0;
//#line 88 "../cfg/Pilot.cfg"
      __max__.throttle_kp = 10.0;
//#line 88 "../cfg/Pilot.cfg"
      __default__.throttle_kp = 0.12;
//#line 88 "../cfg/Pilot.cfg"
      __param_descriptions__.push_back(PilotConfig::AbstractParamDescriptionConstPtr(new PilotConfig::ParamDescription<double>("throttle_kp", "double", 0, "Throttle PID proportional gain (Kp).", "", &PilotConfig::throttle_kp)));
//#line 91 "../cfg/Pilot.cfg"
      __min__.throttle_ki = 0.0;
//#line 91 "../cfg/Pilot.cfg"
      __max__.throttle_ki = 10.0;
//#line 91 "../cfg/Pilot.cfg"
      __default__.throttle_ki = 0.001;
//#line 91 "../cfg/Pilot.cfg"
      __param_descriptions__.push_back(PilotConfig::AbstractParamDescriptionConstPtr(new PilotConfig::ParamDescription<double>("throttle_ki", "double", 0, "Throttle PID integral gain (Ki).", "", &PilotConfig::throttle_ki)));
//#line 94 "../cfg/Pilot.cfg"
      __min__.throttle_kd = 0.0;
//#line 94 "../cfg/Pilot.cfg"
      __max__.throttle_kd = 10.0;
//#line 94 "../cfg/Pilot.cfg"
      __default__.throttle_kd = 0.54;
//#line 94 "../cfg/Pilot.cfg"
      __param_descriptions__.push_back(PilotConfig::AbstractParamDescriptionConstPtr(new PilotConfig::ParamDescription<double>("throttle_kd", "double", 0, "Throttle PID derivative gain (Kd).", "", &PilotConfig::throttle_kd)));
//#line 239 "/opt/ros/electric/stacks/driver_common/dynamic_reconfigure/templates/ConfigType.h"
    
      for (std::vector<PilotConfig::AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); i++)
        __description_message__.parameters.push_back(**i);
      __max__.__toMessage__(__description_message__.max, __param_descriptions__); 
      __min__.__toMessage__(__description_message__.min, __param_descriptions__); 
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__); 
    }
    std::vector<PilotConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    PilotConfig __max__;
    PilotConfig __min__;
    PilotConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;
    static const PilotConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static PilotConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &PilotConfig::__getDescriptionMessage__() 
  {
    return __get_statics__()->__description_message__;
  }

  inline const PilotConfig &PilotConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }
  
  inline const PilotConfig &PilotConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }
  
  inline const PilotConfig &PilotConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }
  
  inline const std::vector<PilotConfig::AbstractParamDescriptionConstPtr> &PilotConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const PilotConfigStatics *PilotConfig::__get_statics__()
  {
    const static PilotConfigStatics *statics;
  
    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = PilotConfigStatics::get_instance();
    
    return statics;
  }

//#line 50 "../cfg/Pilot.cfg"
      const int Pilot_Accel_Plan = 0;
//#line 51 "../cfg/Pilot.cfg"
      const int Pilot_Accel_Example = 1;
//#line 52 "../cfg/Pilot.cfg"
      const int Pilot_Speed_PID = 2;
//#line 53 "../cfg/Pilot.cfg"
      const int Pilot_Speed_Matrix = 3;
//#line 54 "../cfg/Pilot.cfg"
      const int Pilot_Speed_Learned = 4;
}

#endif // __PILOTRECONFIGURATOR_H__
