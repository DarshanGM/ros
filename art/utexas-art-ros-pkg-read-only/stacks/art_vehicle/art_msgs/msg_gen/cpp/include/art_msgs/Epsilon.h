/* Auto-generated by genmsg_cpp for file /home/james/ros/art/utexas-art-ros-pkg-read-only/stacks/art_vehicle/art_msgs/msg/Epsilon.msg */
#ifndef ART_MSGS_MESSAGE_EPSILON_H
#define ART_MSGS_MESSAGE_EPSILON_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace art_msgs
{
template <class ContainerAllocator>
struct Epsilon_ {
  typedef Epsilon_<ContainerAllocator> Type;

  Epsilon_()
  {
  }

  Epsilon_(const ContainerAllocator& _alloc)
  {
  }

  static const float float_value;
  static const float distance;
  static const float speed;
  static const float brake_position;
  static const float steering_angle;
  static const float throttle_position;

private:
  static const char* __s_getDataType_() { return "art_msgs/Epsilon"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "0d2bf0d163e0062abbee50aa67ba8a3a"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# ART epsilon constants\n\
#\n\
#   These constants represent trivial differences in distance, speed,\n\
#   angle, etc.\n\
\n\
# $Id$\n\
\n\
# constants\n\
float32 float_value = 1e-5\n\
float32 distance = 0.01\n\
float32 speed = 0.01\n\
\n\
# epsilon values for servo requests\n\
float32 brake_position = 0.01\n\
float32 steering_angle = 0.001\n\
float32 throttle_position = 0.01\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    return size;
  }

  typedef boost::shared_ptr< ::art_msgs::Epsilon_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::art_msgs::Epsilon_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Epsilon
typedef  ::art_msgs::Epsilon_<std::allocator<void> > Epsilon;

typedef boost::shared_ptr< ::art_msgs::Epsilon> EpsilonPtr;
typedef boost::shared_ptr< ::art_msgs::Epsilon const> EpsilonConstPtr;

template<typename ContainerAllocator> const float Epsilon_<ContainerAllocator>::float_value = 1e-05;
template<typename ContainerAllocator> const float Epsilon_<ContainerAllocator>::distance = 0.01;
template<typename ContainerAllocator> const float Epsilon_<ContainerAllocator>::speed = 0.01;
template<typename ContainerAllocator> const float Epsilon_<ContainerAllocator>::brake_position = 0.01;
template<typename ContainerAllocator> const float Epsilon_<ContainerAllocator>::steering_angle = 0.001;
template<typename ContainerAllocator> const float Epsilon_<ContainerAllocator>::throttle_position = 0.01;

template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::art_msgs::Epsilon_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::art_msgs::Epsilon_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace art_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::art_msgs::Epsilon_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::art_msgs::Epsilon_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::art_msgs::Epsilon_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0d2bf0d163e0062abbee50aa67ba8a3a";
  }

  static const char* value(const  ::art_msgs::Epsilon_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0d2bf0d163e0062aULL;
  static const uint64_t static_value2 = 0xbbee50aa67ba8a3aULL;
};

template<class ContainerAllocator>
struct DataType< ::art_msgs::Epsilon_<ContainerAllocator> > {
  static const char* value() 
  {
    return "art_msgs/Epsilon";
  }

  static const char* value(const  ::art_msgs::Epsilon_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::art_msgs::Epsilon_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ART epsilon constants\n\
#\n\
#   These constants represent trivial differences in distance, speed,\n\
#   angle, etc.\n\
\n\
# $Id$\n\
\n\
# constants\n\
float32 float_value = 1e-5\n\
float32 distance = 0.01\n\
float32 speed = 0.01\n\
\n\
# epsilon values for servo requests\n\
float32 brake_position = 0.01\n\
float32 steering_angle = 0.001\n\
float32 throttle_position = 0.01\n\
\n\
";
  }

  static const char* value(const  ::art_msgs::Epsilon_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::art_msgs::Epsilon_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::art_msgs::Epsilon_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Epsilon_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::art_msgs::Epsilon_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::art_msgs::Epsilon_<ContainerAllocator> & v) 
  {
  }
};


} // namespace message_operations
} // namespace ros

#endif // ART_MSGS_MESSAGE_EPSILON_H

