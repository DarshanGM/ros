#! /usr/bin/env python
#*
#*  Copyright (c) 2010, 2011 Austin Robot Technology
#*  All rights reserved.
#*
#*  Redistribution and use in source and binary forms, with or without
#*  modification, are permitted provided that the following conditions
#*  are met:
#*
#*   * Redistributions of source code must retain the above copyright
#*     notice, this list of conditions and the following disclaimer.
#*   * Redistributions in binary form must reproduce the above
#*     copyright notice, this list of conditions and the following
#*     disclaimer in the documentation and/or other materials provided
#*     with the distribution.
#*   * Neither the name of the author nor the names of other
#*     contributors may be used to endorse or promote products derived
#*     from this software without specific prior written permission.
#*
#*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#*  POSSIBILITY OF SUCH DAMAGE.
#***********************************************************

# pilot node dynamic configuration
# $Id: Pilot.cfg 1543 2011-05-10 22:39:28Z jack.oquin $

PACKAGE='art_pilot'
import roslib; roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator import *
from driver_base.msg import SensorLevels


# only includes parameters reconfigurable while running

gen = ParameterGenerator()

# Acceleration controller options
accel_options = [
    gen.const("Accel_Plan",     int_t, 0, "Plan-based controller"),
    gen.const("Accel_Example",  int_t, 1, "Acceleration control example"),
    gen.const("Speed_PID",      int_t, 2, "Speed control PID"),
    gen.const("Speed_Matrix",   int_t, 3, "Speed control matrix"),
    gen.const("Speed_Learned",  int_t, 4, "Learned speed control")]

accel_enum = gen.enum(accel_options, "Acceleration controller options")

#       Name, Type, Reconfiguration level, Description, Default, Min, Max
gen.add("acceleration_controller", int_t, SensorLevels.RECONFIGURE_CLOSE,
        "Acceleration controller.", 0, edit_method = accel_enum)

gen.add("brake_hold", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Brake hold command when stopped.", 0.7, 0.0, 1.0)

gen.add("human_steering", bool_t, SensorLevels.RECONFIGURE_RUNNING,
        "Allow human driver to steer (otherwise pilot steers the car).",
        False)

gen.add("limit_forward", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Speed limit going forward (m/s).", 14.0, 0.0, 25.0)

gen.add("limit_reverse", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Speed limit going in reverse (m/s).", 3.0, 0.0, 4.0)

gen.add("timeout", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Device message timeout (s).", 0.5, 0.0, 1.0)

gen.add("brake_kp", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Brake PID proportional gain (Kp).", -0.2, -10.0, 0.0)

gen.add("brake_ki", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Brake PID integral gain (Ki).", -0.0002, -10.0, 0.0)

gen.add("brake_kd", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Brake PID derivative gain (Kd).", -1.6, -10.0, 0.0)

gen.add("throttle_kp", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Throttle PID proportional gain (Kp).", 0.12, 0.0, 10.0)

gen.add("throttle_ki", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Throttle PID integral gain (Ki).", 0.001, 0.0, 10.0)

gen.add("throttle_kd", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Throttle PID derivative gain (Kd).", 0.54, 0.0, 10.0)

exit(gen.generate(PACKAGE, "pilot", "Pilot"))
